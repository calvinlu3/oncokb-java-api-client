/*
 * oncokb-transcript API
 * oncokb-transcript API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.oncokb.oncokb_transcript.client;

import org.oncokb.oncokb_transcript.ApiCallback;
import org.oncokb.oncokb_transcript.ApiClient;
import org.oncokb.oncokb_transcript.ApiException;
import org.oncokb.oncokb_transcript.ApiResponse;
import org.oncokb.oncokb_transcript.Configuration;
import org.oncokb.oncokb_transcript.Pair;
import org.oncokb.oncokb_transcript.ProgressRequestBody;
import org.oncokb.oncokb_transcript.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.oncokb.oncokb_transcript.client.Sequence;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SequenceControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SequenceControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SequenceControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for findCanonicalSequenceUsingGET
     * @param referenceGenome referenceGenome (required)
     * @param entrezGeneId entrezGeneId (required)
     * @param sequenceType sequenceType (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findCanonicalSequenceUsingGETCall(String referenceGenome, Integer entrezGeneId, String sequenceType, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/find-canonical-sequences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (referenceGenome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("referenceGenome", referenceGenome));
        }

        if (entrezGeneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entrezGeneId", entrezGeneId));
        }

        if (sequenceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sequenceType", sequenceType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findCanonicalSequenceUsingGETValidateBeforeCall(String referenceGenome, Integer entrezGeneId, String sequenceType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'referenceGenome' is set
        if (referenceGenome == null) {
            throw new ApiException("Missing the required parameter 'referenceGenome' when calling findCanonicalSequenceUsingGET(Async)");
        }
        
        // verify the required parameter 'entrezGeneId' is set
        if (entrezGeneId == null) {
            throw new ApiException("Missing the required parameter 'entrezGeneId' when calling findCanonicalSequenceUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = findCanonicalSequenceUsingGETCall(referenceGenome, entrezGeneId, sequenceType, _callback);
        return localVarCall;

    }

    /**
     * findCanonicalSequence
     * 
     * @param referenceGenome referenceGenome (required)
     * @param entrezGeneId entrezGeneId (required)
     * @param sequenceType sequenceType (optional)
     * @return Sequence
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Sequence findCanonicalSequenceUsingGET(String referenceGenome, Integer entrezGeneId, String sequenceType) throws ApiException {
        ApiResponse<Sequence> localVarResp = findCanonicalSequenceUsingGETWithHttpInfo(referenceGenome, entrezGeneId, sequenceType);
        return localVarResp.getData();
    }

    /**
     * findCanonicalSequence
     * 
     * @param referenceGenome referenceGenome (required)
     * @param entrezGeneId entrezGeneId (required)
     * @param sequenceType sequenceType (optional)
     * @return ApiResponse&lt;Sequence&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Sequence> findCanonicalSequenceUsingGETWithHttpInfo(String referenceGenome, Integer entrezGeneId, String sequenceType) throws ApiException {
        okhttp3.Call localVarCall = findCanonicalSequenceUsingGETValidateBeforeCall(referenceGenome, entrezGeneId, sequenceType, null);
        Type localVarReturnType = new TypeToken<Sequence>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * findCanonicalSequence (asynchronously)
     * 
     * @param referenceGenome referenceGenome (required)
     * @param entrezGeneId entrezGeneId (required)
     * @param sequenceType sequenceType (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findCanonicalSequenceUsingGETAsync(String referenceGenome, Integer entrezGeneId, String sequenceType, final ApiCallback<Sequence> _callback) throws ApiException {

        okhttp3.Call localVarCall = findCanonicalSequenceUsingGETValidateBeforeCall(referenceGenome, entrezGeneId, sequenceType, _callback);
        Type localVarReturnType = new TypeToken<Sequence>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findCanonicalSequencesUsingPOST
     * @param referenceGenome referenceGenome (required)
     * @param sequenceType sequenceType (optional)
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findCanonicalSequencesUsingPOSTCall(String referenceGenome, String sequenceType, List<Integer> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/find-canonical-sequences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (referenceGenome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("referenceGenome", referenceGenome));
        }

        if (sequenceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sequenceType", sequenceType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findCanonicalSequencesUsingPOSTValidateBeforeCall(String referenceGenome, String sequenceType, List<Integer> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'referenceGenome' is set
        if (referenceGenome == null) {
            throw new ApiException("Missing the required parameter 'referenceGenome' when calling findCanonicalSequencesUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = findCanonicalSequencesUsingPOSTCall(referenceGenome, sequenceType, requestBody, _callback);
        return localVarCall;

    }

    /**
     * findCanonicalSequences
     * 
     * @param referenceGenome referenceGenome (required)
     * @param sequenceType sequenceType (optional)
     * @param requestBody  (optional)
     * @return List&lt;Sequence&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Sequence> findCanonicalSequencesUsingPOST(String referenceGenome, String sequenceType, List<Integer> requestBody) throws ApiException {
        ApiResponse<List<Sequence>> localVarResp = findCanonicalSequencesUsingPOSTWithHttpInfo(referenceGenome, sequenceType, requestBody);
        return localVarResp.getData();
    }

    /**
     * findCanonicalSequences
     * 
     * @param referenceGenome referenceGenome (required)
     * @param sequenceType sequenceType (optional)
     * @param requestBody  (optional)
     * @return ApiResponse&lt;List&lt;Sequence&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Sequence>> findCanonicalSequencesUsingPOSTWithHttpInfo(String referenceGenome, String sequenceType, List<Integer> requestBody) throws ApiException {
        okhttp3.Call localVarCall = findCanonicalSequencesUsingPOSTValidateBeforeCall(referenceGenome, sequenceType, requestBody, null);
        Type localVarReturnType = new TypeToken<List<Sequence>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * findCanonicalSequences (asynchronously)
     * 
     * @param referenceGenome referenceGenome (required)
     * @param sequenceType sequenceType (optional)
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findCanonicalSequencesUsingPOSTAsync(String referenceGenome, String sequenceType, List<Integer> requestBody, final ApiCallback<List<Sequence>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findCanonicalSequencesUsingPOSTValidateBeforeCall(referenceGenome, sequenceType, requestBody, _callback);
        Type localVarReturnType = new TypeToken<List<Sequence>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
