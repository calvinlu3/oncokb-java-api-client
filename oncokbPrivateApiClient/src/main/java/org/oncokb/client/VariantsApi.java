/*
 * OncoKB Private APIs
 * These endpoints are for private use only.
 *
 * The version of the OpenAPI document: v1.2.2
 * Contact: contact@oncokb.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.oncokb.client;

import org.oncokb.ApiCallback;
import org.oncokb.ApiClient;
import org.oncokb.ApiException;
import org.oncokb.ApiResponse;
import org.oncokb.Configuration;
import org.oncokb.Pair;
import org.oncokb.ProgressRequestBody;
import org.oncokb.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.oncokb.client.ActionableGene;
import org.oncokb.client.Alteration;
import org.oncokb.client.AnnotatedVariant;
import org.oncokb.client.VariantSearchQuery;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VariantsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VariantsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VariantsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for utilsAllActionableVariantsGetUsingGET
     * @param version The data version (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call utilsAllActionableVariantsGetUsingGETCall(String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/utils/allActionableVariants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call utilsAllActionableVariantsGetUsingGETValidateBeforeCall(String version, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = utilsAllActionableVariantsGetUsingGETCall(version, _callback);
        return localVarCall;

    }

    /**
     * utilsAllActionableVariantsGet
     * Get All Actionable Variants.
     * @param version The data version (optional)
     * @return List&lt;ActionableGene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public List<ActionableGene> utilsAllActionableVariantsGetUsingGET(String version) throws ApiException {
        ApiResponse<List<ActionableGene>> localVarResp = utilsAllActionableVariantsGetUsingGETWithHttpInfo(version);
        return localVarResp.getData();
    }

    /**
     * utilsAllActionableVariantsGet
     * Get All Actionable Variants.
     * @param version The data version (optional)
     * @return ApiResponse&lt;List&lt;ActionableGene&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ActionableGene>> utilsAllActionableVariantsGetUsingGETWithHttpInfo(String version) throws ApiException {
        okhttp3.Call localVarCall = utilsAllActionableVariantsGetUsingGETValidateBeforeCall(version, null);
        Type localVarReturnType = new TypeToken<List<ActionableGene>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * utilsAllActionableVariantsGet (asynchronously)
     * Get All Actionable Variants.
     * @param version The data version (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call utilsAllActionableVariantsGetUsingGETAsync(String version, final ApiCallback<List<ActionableGene>> _callback) throws ApiException {

        okhttp3.Call localVarCall = utilsAllActionableVariantsGetUsingGETValidateBeforeCall(version, _callback);
        Type localVarReturnType = new TypeToken<List<ActionableGene>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for utilsAllActionableVariantsTxtGetUsingGET
     * @param version The data version (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call utilsAllActionableVariantsTxtGetUsingGETCall(String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/utils/allActionableVariants.txt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call utilsAllActionableVariantsTxtGetUsingGETValidateBeforeCall(String version, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = utilsAllActionableVariantsTxtGetUsingGETCall(version, _callback);
        return localVarCall;

    }

    /**
     * utilsAllActionableVariantsTxtGet
     * Get All Actionable Variants in text file.
     * @param version The data version (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public String utilsAllActionableVariantsTxtGetUsingGET(String version) throws ApiException {
        ApiResponse<String> localVarResp = utilsAllActionableVariantsTxtGetUsingGETWithHttpInfo(version);
        return localVarResp.getData();
    }

    /**
     * utilsAllActionableVariantsTxtGet
     * Get All Actionable Variants in text file.
     * @param version The data version (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> utilsAllActionableVariantsTxtGetUsingGETWithHttpInfo(String version) throws ApiException {
        okhttp3.Call localVarCall = utilsAllActionableVariantsTxtGetUsingGETValidateBeforeCall(version, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * utilsAllActionableVariantsTxtGet (asynchronously)
     * Get All Actionable Variants in text file.
     * @param version The data version (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call utilsAllActionableVariantsTxtGetUsingGETAsync(String version, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = utilsAllActionableVariantsTxtGetUsingGETValidateBeforeCall(version, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for utilsAllAnnotatedVariantsGetUsingGET
     * @param version The data version (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call utilsAllAnnotatedVariantsGetUsingGETCall(String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/utils/allAnnotatedVariants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call utilsAllAnnotatedVariantsGetUsingGETValidateBeforeCall(String version, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = utilsAllAnnotatedVariantsGetUsingGETCall(version, _callback);
        return localVarCall;

    }

    /**
     * utilsAllAnnotatedVariantsGet
     * Get All Annotated Variants.
     * @param version The data version (optional)
     * @return List&lt;AnnotatedVariant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public List<AnnotatedVariant> utilsAllAnnotatedVariantsGetUsingGET(String version) throws ApiException {
        ApiResponse<List<AnnotatedVariant>> localVarResp = utilsAllAnnotatedVariantsGetUsingGETWithHttpInfo(version);
        return localVarResp.getData();
    }

    /**
     * utilsAllAnnotatedVariantsGet
     * Get All Annotated Variants.
     * @param version The data version (optional)
     * @return ApiResponse&lt;List&lt;AnnotatedVariant&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AnnotatedVariant>> utilsAllAnnotatedVariantsGetUsingGETWithHttpInfo(String version) throws ApiException {
        okhttp3.Call localVarCall = utilsAllAnnotatedVariantsGetUsingGETValidateBeforeCall(version, null);
        Type localVarReturnType = new TypeToken<List<AnnotatedVariant>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * utilsAllAnnotatedVariantsGet (asynchronously)
     * Get All Annotated Variants.
     * @param version The data version (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call utilsAllAnnotatedVariantsGetUsingGETAsync(String version, final ApiCallback<List<AnnotatedVariant>> _callback) throws ApiException {

        okhttp3.Call localVarCall = utilsAllAnnotatedVariantsGetUsingGETValidateBeforeCall(version, _callback);
        Type localVarReturnType = new TypeToken<List<AnnotatedVariant>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for utilsAllAnnotatedVariantsTxtGetUsingGET
     * @param version The data version (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call utilsAllAnnotatedVariantsTxtGetUsingGETCall(String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/utils/allAnnotatedVariants.txt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call utilsAllAnnotatedVariantsTxtGetUsingGETValidateBeforeCall(String version, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = utilsAllAnnotatedVariantsTxtGetUsingGETCall(version, _callback);
        return localVarCall;

    }

    /**
     * utilsAllAnnotatedVariantsTxtGet
     * Get All Annotated Variants in text file.
     * @param version The data version (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public String utilsAllAnnotatedVariantsTxtGetUsingGET(String version) throws ApiException {
        ApiResponse<String> localVarResp = utilsAllAnnotatedVariantsTxtGetUsingGETWithHttpInfo(version);
        return localVarResp.getData();
    }

    /**
     * utilsAllAnnotatedVariantsTxtGet
     * Get All Annotated Variants in text file.
     * @param version The data version (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> utilsAllAnnotatedVariantsTxtGetUsingGETWithHttpInfo(String version) throws ApiException {
        okhttp3.Call localVarCall = utilsAllAnnotatedVariantsTxtGetUsingGETValidateBeforeCall(version, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * utilsAllAnnotatedVariantsTxtGet (asynchronously)
     * Get All Annotated Variants in text file.
     * @param version The data version (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call utilsAllAnnotatedVariantsTxtGetUsingGETAsync(String version, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = utilsAllAnnotatedVariantsTxtGetUsingGETValidateBeforeCall(version, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for variantsGetUsingGET
     * @param fields The fields to be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variantsGetUsingGETCall(String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/variants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call variantsGetUsingGETValidateBeforeCall(String fields, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = variantsGetUsingGETCall(fields, _callback);
        return localVarCall;

    }

    /**
     * variantsGet
     * Get all annotated variants.
     * @param fields The fields to be returned. (optional)
     * @return List&lt;Alteration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Alteration> variantsGetUsingGET(String fields) throws ApiException {
        ApiResponse<List<Alteration>> localVarResp = variantsGetUsingGETWithHttpInfo(fields);
        return localVarResp.getData();
    }

    /**
     * variantsGet
     * Get all annotated variants.
     * @param fields The fields to be returned. (optional)
     * @return ApiResponse&lt;List&lt;Alteration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Alteration>> variantsGetUsingGETWithHttpInfo(String fields) throws ApiException {
        okhttp3.Call localVarCall = variantsGetUsingGETValidateBeforeCall(fields, null);
        Type localVarReturnType = new TypeToken<List<Alteration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * variantsGet (asynchronously)
     * Get all annotated variants.
     * @param fields The fields to be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variantsGetUsingGETAsync(String fields, final ApiCallback<List<Alteration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = variantsGetUsingGETValidateBeforeCall(fields, _callback);
        Type localVarReturnType = new TypeToken<List<Alteration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for variantsLookupGetUsingGET
     * @param entrezGeneId The entrez gene ID. entrezGeneId is prioritize than hugoSymbol if both parameters have been defined (optional)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param variant variant name. (optional)
     * @param variantType variantType (optional)
     * @param consequence consequence (optional)
     * @param proteinStart proteinStart (optional)
     * @param proteinEnd proteinEnd (optional)
     * @param hgvs HGVS varaint. Its priority is higher than entrezGeneId/hugoSymbol + variant combination (optional)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param fields The fields to be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variantsLookupGetUsingGETCall(Integer entrezGeneId, String hugoSymbol, String variant, String variantType, String consequence, Integer proteinStart, Integer proteinEnd, String hgvs, String referenceGenome, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/variants/lookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entrezGeneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entrezGeneId", entrezGeneId));
        }

        if (hugoSymbol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hugoSymbol", hugoSymbol));
        }

        if (variant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variant", variant));
        }

        if (variantType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variantType", variantType));
        }

        if (consequence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("consequence", consequence));
        }

        if (proteinStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proteinStart", proteinStart));
        }

        if (proteinEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proteinEnd", proteinEnd));
        }

        if (hgvs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hgvs", hgvs));
        }

        if (referenceGenome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("referenceGenome", referenceGenome));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call variantsLookupGetUsingGETValidateBeforeCall(Integer entrezGeneId, String hugoSymbol, String variant, String variantType, String consequence, Integer proteinStart, Integer proteinEnd, String hgvs, String referenceGenome, String fields, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = variantsLookupGetUsingGETCall(entrezGeneId, hugoSymbol, variant, variantType, consequence, proteinStart, proteinEnd, hgvs, referenceGenome, fields, _callback);
        return localVarCall;

    }

    /**
     * variantsLookupGet
     * Search for variants.
     * @param entrezGeneId The entrez gene ID. entrezGeneId is prioritize than hugoSymbol if both parameters have been defined (optional)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param variant variant name. (optional)
     * @param variantType variantType (optional)
     * @param consequence consequence (optional)
     * @param proteinStart proteinStart (optional)
     * @param proteinEnd proteinEnd (optional)
     * @param hgvs HGVS varaint. Its priority is higher than entrezGeneId/hugoSymbol + variant combination (optional)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param fields The fields to be returned. (optional)
     * @return List&lt;Alteration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Alteration> variantsLookupGetUsingGET(Integer entrezGeneId, String hugoSymbol, String variant, String variantType, String consequence, Integer proteinStart, Integer proteinEnd, String hgvs, String referenceGenome, String fields) throws ApiException {
        ApiResponse<List<Alteration>> localVarResp = variantsLookupGetUsingGETWithHttpInfo(entrezGeneId, hugoSymbol, variant, variantType, consequence, proteinStart, proteinEnd, hgvs, referenceGenome, fields);
        return localVarResp.getData();
    }

    /**
     * variantsLookupGet
     * Search for variants.
     * @param entrezGeneId The entrez gene ID. entrezGeneId is prioritize than hugoSymbol if both parameters have been defined (optional)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param variant variant name. (optional)
     * @param variantType variantType (optional)
     * @param consequence consequence (optional)
     * @param proteinStart proteinStart (optional)
     * @param proteinEnd proteinEnd (optional)
     * @param hgvs HGVS varaint. Its priority is higher than entrezGeneId/hugoSymbol + variant combination (optional)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param fields The fields to be returned. (optional)
     * @return ApiResponse&lt;List&lt;Alteration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Alteration>> variantsLookupGetUsingGETWithHttpInfo(Integer entrezGeneId, String hugoSymbol, String variant, String variantType, String consequence, Integer proteinStart, Integer proteinEnd, String hgvs, String referenceGenome, String fields) throws ApiException {
        okhttp3.Call localVarCall = variantsLookupGetUsingGETValidateBeforeCall(entrezGeneId, hugoSymbol, variant, variantType, consequence, proteinStart, proteinEnd, hgvs, referenceGenome, fields, null);
        Type localVarReturnType = new TypeToken<List<Alteration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * variantsLookupGet (asynchronously)
     * Search for variants.
     * @param entrezGeneId The entrez gene ID. entrezGeneId is prioritize than hugoSymbol if both parameters have been defined (optional)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param variant variant name. (optional)
     * @param variantType variantType (optional)
     * @param consequence consequence (optional)
     * @param proteinStart proteinStart (optional)
     * @param proteinEnd proteinEnd (optional)
     * @param hgvs HGVS varaint. Its priority is higher than entrezGeneId/hugoSymbol + variant combination (optional)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param fields The fields to be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variantsLookupGetUsingGETAsync(Integer entrezGeneId, String hugoSymbol, String variant, String variantType, String consequence, Integer proteinStart, Integer proteinEnd, String hgvs, String referenceGenome, String fields, final ApiCallback<List<Alteration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = variantsLookupGetUsingGETValidateBeforeCall(entrezGeneId, hugoSymbol, variant, variantType, consequence, proteinStart, proteinEnd, hgvs, referenceGenome, fields, _callback);
        Type localVarReturnType = new TypeToken<List<Alteration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for variantsLookupPostUsingPOST
     * @param body List of queries. (required)
     * @param fields The fields to be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variantsLookupPostUsingPOSTCall(List<VariantSearchQuery> body, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/variants/lookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call variantsLookupPostUsingPOSTValidateBeforeCall(List<VariantSearchQuery> body, String fields, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling variantsLookupPostUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = variantsLookupPostUsingPOSTCall(body, fields, _callback);
        return localVarCall;

    }

    /**
     * variantsLookupPost
     * Search for variants.
     * @param body List of queries. (required)
     * @param fields The fields to be returned. (optional)
     * @return List&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<List<Object>> variantsLookupPostUsingPOST(List<VariantSearchQuery> body, String fields) throws ApiException {
        ApiResponse<List<List<Object>>> localVarResp = variantsLookupPostUsingPOSTWithHttpInfo(body, fields);
        return localVarResp.getData();
    }

    /**
     * variantsLookupPost
     * Search for variants.
     * @param body List of queries. (required)
     * @param fields The fields to be returned. (optional)
     * @return ApiResponse&lt;List&lt;List&lt;Object&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<List<Object>>> variantsLookupPostUsingPOSTWithHttpInfo(List<VariantSearchQuery> body, String fields) throws ApiException {
        okhttp3.Call localVarCall = variantsLookupPostUsingPOSTValidateBeforeCall(body, fields, null);
        Type localVarReturnType = new TypeToken<List<List<Object>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * variantsLookupPost (asynchronously)
     * Search for variants.
     * @param body List of queries. (required)
     * @param fields The fields to be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variantsLookupPostUsingPOSTAsync(List<VariantSearchQuery> body, String fields, final ApiCallback<List<List<Object>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = variantsLookupPostUsingPOSTValidateBeforeCall(body, fields, _callback);
        Type localVarReturnType = new TypeToken<List<List<Object>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
