/*
 * OncoKB Private APIs
 * These endpoints are for private use only.
 *
 * The version of the OpenAPI document: v1.2.2
 * Contact: contact@oncokb.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.oncokb.client;

import org.oncokb.ApiCallback;
import org.oncokb.ApiClient;
import org.oncokb.ApiException;
import org.oncokb.ApiResponse;
import org.oncokb.Configuration;
import org.oncokb.Pair;
import org.oncokb.ProgressRequestBody;
import org.oncokb.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.oncokb.client.EvidenceQueries;
import org.oncokb.client.IndicatorQueryResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for searchGetUsingGET
     * @param id The query ID (optional)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param entrezGeneId The entrez gene ID. (optional)
     * @param variant Variant name. (optional)
     * @param variantType Variant type. (optional)
     * @param svType Structural Variant Type. (optional)
     * @param consequence Consequence (optional)
     * @param proteinStart Protein Start (optional)
     * @param proteinEnd Protein End (optional)
     * @param tumorType Tumor type name. OncoTree code is supported. (optional)
     * @param levels Level of evidences. (optional)
     * @param highestLevelOnly Only show treatments of highest level (optional, default to false)
     * @param queryType Query type. There maybe slight differences between different query types. Currently support web or regular. (optional, default to regular)
     * @param evidenceType Evidence type. (optional)
     * @param hgvs HGVS varaint. Its priority is higher than entrezGeneId/hugoSymbol + variant combination (optional)
     * @param fields The fields to be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchGetUsingGETCall(String id, String referenceGenome, String hugoSymbol, Integer entrezGeneId, String variant, String variantType, String svType, String consequence, Integer proteinStart, Integer proteinEnd, String tumorType, String levels, Boolean highestLevelOnly, String queryType, String evidenceType, String hgvs, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (referenceGenome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("referenceGenome", referenceGenome));
        }

        if (hugoSymbol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hugoSymbol", hugoSymbol));
        }

        if (entrezGeneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entrezGeneId", entrezGeneId));
        }

        if (variant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variant", variant));
        }

        if (variantType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variantType", variantType));
        }

        if (svType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("svType", svType));
        }

        if (consequence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("consequence", consequence));
        }

        if (proteinStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proteinStart", proteinStart));
        }

        if (proteinEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proteinEnd", proteinEnd));
        }

        if (tumorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tumorType", tumorType));
        }

        if (levels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("levels", levels));
        }

        if (highestLevelOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highestLevelOnly", highestLevelOnly));
        }

        if (queryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryType", queryType));
        }

        if (evidenceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidenceType", evidenceType));
        }

        if (hgvs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hgvs", hgvs));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchGetUsingGETValidateBeforeCall(String id, String referenceGenome, String hugoSymbol, Integer entrezGeneId, String variant, String variantType, String svType, String consequence, Integer proteinStart, Integer proteinEnd, String tumorType, String levels, Boolean highestLevelOnly, String queryType, String evidenceType, String hgvs, String fields, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = searchGetUsingGETCall(id, referenceGenome, hugoSymbol, entrezGeneId, variant, variantType, svType, consequence, proteinStart, proteinEnd, tumorType, levels, highestLevelOnly, queryType, evidenceType, hgvs, fields, _callback);
        return localVarCall;

    }

    /**
     * searchGet
     * General search for possible combinations.
     * @param id The query ID (optional)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param entrezGeneId The entrez gene ID. (optional)
     * @param variant Variant name. (optional)
     * @param variantType Variant type. (optional)
     * @param svType Structural Variant Type. (optional)
     * @param consequence Consequence (optional)
     * @param proteinStart Protein Start (optional)
     * @param proteinEnd Protein End (optional)
     * @param tumorType Tumor type name. OncoTree code is supported. (optional)
     * @param levels Level of evidences. (optional)
     * @param highestLevelOnly Only show treatments of highest level (optional, default to false)
     * @param queryType Query type. There maybe slight differences between different query types. Currently support web or regular. (optional, default to regular)
     * @param evidenceType Evidence type. (optional)
     * @param hgvs HGVS varaint. Its priority is higher than entrezGeneId/hugoSymbol + variant combination (optional)
     * @param fields The fields to be returned. (optional)
     * @return IndicatorQueryResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public IndicatorQueryResp searchGetUsingGET(String id, String referenceGenome, String hugoSymbol, Integer entrezGeneId, String variant, String variantType, String svType, String consequence, Integer proteinStart, Integer proteinEnd, String tumorType, String levels, Boolean highestLevelOnly, String queryType, String evidenceType, String hgvs, String fields) throws ApiException {
        ApiResponse<IndicatorQueryResp> localVarResp = searchGetUsingGETWithHttpInfo(id, referenceGenome, hugoSymbol, entrezGeneId, variant, variantType, svType, consequence, proteinStart, proteinEnd, tumorType, levels, highestLevelOnly, queryType, evidenceType, hgvs, fields);
        return localVarResp.getData();
    }

    /**
     * searchGet
     * General search for possible combinations.
     * @param id The query ID (optional)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param entrezGeneId The entrez gene ID. (optional)
     * @param variant Variant name. (optional)
     * @param variantType Variant type. (optional)
     * @param svType Structural Variant Type. (optional)
     * @param consequence Consequence (optional)
     * @param proteinStart Protein Start (optional)
     * @param proteinEnd Protein End (optional)
     * @param tumorType Tumor type name. OncoTree code is supported. (optional)
     * @param levels Level of evidences. (optional)
     * @param highestLevelOnly Only show treatments of highest level (optional, default to false)
     * @param queryType Query type. There maybe slight differences between different query types. Currently support web or regular. (optional, default to regular)
     * @param evidenceType Evidence type. (optional)
     * @param hgvs HGVS varaint. Its priority is higher than entrezGeneId/hugoSymbol + variant combination (optional)
     * @param fields The fields to be returned. (optional)
     * @return ApiResponse&lt;IndicatorQueryResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IndicatorQueryResp> searchGetUsingGETWithHttpInfo(String id, String referenceGenome, String hugoSymbol, Integer entrezGeneId, String variant, String variantType, String svType, String consequence, Integer proteinStart, Integer proteinEnd, String tumorType, String levels, Boolean highestLevelOnly, String queryType, String evidenceType, String hgvs, String fields) throws ApiException {
        okhttp3.Call localVarCall = searchGetUsingGETValidateBeforeCall(id, referenceGenome, hugoSymbol, entrezGeneId, variant, variantType, svType, consequence, proteinStart, proteinEnd, tumorType, levels, highestLevelOnly, queryType, evidenceType, hgvs, fields, null);
        Type localVarReturnType = new TypeToken<IndicatorQueryResp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * searchGet (asynchronously)
     * General search for possible combinations.
     * @param id The query ID (optional)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param entrezGeneId The entrez gene ID. (optional)
     * @param variant Variant name. (optional)
     * @param variantType Variant type. (optional)
     * @param svType Structural Variant Type. (optional)
     * @param consequence Consequence (optional)
     * @param proteinStart Protein Start (optional)
     * @param proteinEnd Protein End (optional)
     * @param tumorType Tumor type name. OncoTree code is supported. (optional)
     * @param levels Level of evidences. (optional)
     * @param highestLevelOnly Only show treatments of highest level (optional, default to false)
     * @param queryType Query type. There maybe slight differences between different query types. Currently support web or regular. (optional, default to regular)
     * @param evidenceType Evidence type. (optional)
     * @param hgvs HGVS varaint. Its priority is higher than entrezGeneId/hugoSymbol + variant combination (optional)
     * @param fields The fields to be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchGetUsingGETAsync(String id, String referenceGenome, String hugoSymbol, Integer entrezGeneId, String variant, String variantType, String svType, String consequence, Integer proteinStart, Integer proteinEnd, String tumorType, String levels, Boolean highestLevelOnly, String queryType, String evidenceType, String hgvs, String fields, final ApiCallback<IndicatorQueryResp> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchGetUsingGETValidateBeforeCall(id, referenceGenome, hugoSymbol, entrezGeneId, variant, variantType, svType, consequence, proteinStart, proteinEnd, tumorType, levels, highestLevelOnly, queryType, evidenceType, hgvs, fields, _callback);
        Type localVarReturnType = new TypeToken<IndicatorQueryResp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchPostUsingPOST
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @param fields The fields to be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPostUsingPOSTCall(EvidenceQueries body, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchPostUsingPOSTValidateBeforeCall(EvidenceQueries body, String fields, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling searchPostUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = searchPostUsingPOSTCall(body, fields, _callback);
        return localVarCall;

    }

    /**
     * searchPost
     * General search for possible combinations.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @param fields The fields to be returned. (optional)
     * @return List&lt;IndicatorQueryResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public List<IndicatorQueryResp> searchPostUsingPOST(EvidenceQueries body, String fields) throws ApiException {
        ApiResponse<List<IndicatorQueryResp>> localVarResp = searchPostUsingPOSTWithHttpInfo(body, fields);
        return localVarResp.getData();
    }

    /**
     * searchPost
     * General search for possible combinations.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @param fields The fields to be returned. (optional)
     * @return ApiResponse&lt;List&lt;IndicatorQueryResp&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IndicatorQueryResp>> searchPostUsingPOSTWithHttpInfo(EvidenceQueries body, String fields) throws ApiException {
        okhttp3.Call localVarCall = searchPostUsingPOSTValidateBeforeCall(body, fields, null);
        Type localVarReturnType = new TypeToken<List<IndicatorQueryResp>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * searchPost (asynchronously)
     * General search for possible combinations.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @param fields The fields to be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPostUsingPOSTAsync(EvidenceQueries body, String fields, final ApiCallback<List<IndicatorQueryResp>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchPostUsingPOSTValidateBeforeCall(body, fields, _callback);
        Type localVarReturnType = new TypeToken<List<IndicatorQueryResp>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
