/*
 * OncoKB Private APIs
 * These endpoints are for private use only.
 *
 * The version of the OpenAPI document: v1.2.2
 * Contact: contact@oncokb.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.oncokb.client;

import org.oncokb.ApiCallback;
import org.oncokb.ApiClient;
import org.oncokb.ApiException;
import org.oncokb.ApiResponse;
import org.oncokb.Configuration;
import org.oncokb.Pair;
import org.oncokb.ProgressRequestBody;
import org.oncokb.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.oncokb.client.AnnotateCopyNumberAlterationQuery;
import org.oncokb.client.AnnotateMutationByGenomicChangeQuery;
import org.oncokb.client.AnnotateMutationByHGVSgQuery;
import org.oncokb.client.AnnotateMutationByProteinChangeQuery;
import org.oncokb.client.AnnotateStructuralVariantQuery;
import org.oncokb.client.IndicatorQueryResp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnnotationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AnnotationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnnotationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for annotateCopyNumberAlterationsGetUsingGET
     * @param copyNameAlterationType Copy number alteration type (required)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. Example: BRAF (optional)
     * @param entrezGeneId The entrez gene ID. (Higher priority than hugoSymbol). Example: 673 (optional)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param tumorType OncoTree(http://oncotree.info) tumor type name. The field supports OncoTree Code, OncoTree Name and OncoTree Main type. Example: Melanoma (optional)
     * @param evidenceType Evidence type to compute. This could help to improve the performance if you only look for sub-content. Example: ONCOGENIC. All available evidence type are GENE_SUMMARY, MUTATION_SUMMARY, TUMOR_TYPE_SUMMARY, PROGNOSTIC_SUMMARY, DIAGNOSTIC_SUMMARY, ONCOGENIC, MUTATION_EFFECT, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE. For multiple evidence types query, use &#39;,&#39; as separator. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotateCopyNumberAlterationsGetUsingGETCall(String copyNameAlterationType, String hugoSymbol, Integer entrezGeneId, String referenceGenome, String tumorType, String evidenceType, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotate/copyNumberAlterations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hugoSymbol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hugoSymbol", hugoSymbol));
        }

        if (entrezGeneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entrezGeneId", entrezGeneId));
        }

        if (copyNameAlterationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("copyNameAlterationType", copyNameAlterationType));
        }

        if (referenceGenome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("referenceGenome", referenceGenome));
        }

        if (tumorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tumorType", tumorType));
        }

        if (evidenceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidenceType", evidenceType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotateCopyNumberAlterationsGetUsingGETValidateBeforeCall(String copyNameAlterationType, String hugoSymbol, Integer entrezGeneId, String referenceGenome, String tumorType, String evidenceType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'copyNameAlterationType' is set
        if (copyNameAlterationType == null) {
            throw new ApiException("Missing the required parameter 'copyNameAlterationType' when calling annotateCopyNumberAlterationsGetUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = annotateCopyNumberAlterationsGetUsingGETCall(copyNameAlterationType, hugoSymbol, entrezGeneId, referenceGenome, tumorType, evidenceType, _callback);
        return localVarCall;

    }

    /**
     * annotateCopyNumberAlterationsGet
     * Annotate copy number alteration.
     * @param copyNameAlterationType Copy number alteration type (required)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. Example: BRAF (optional)
     * @param entrezGeneId The entrez gene ID. (Higher priority than hugoSymbol). Example: 673 (optional)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param tumorType OncoTree(http://oncotree.info) tumor type name. The field supports OncoTree Code, OncoTree Name and OncoTree Main type. Example: Melanoma (optional)
     * @param evidenceType Evidence type to compute. This could help to improve the performance if you only look for sub-content. Example: ONCOGENIC. All available evidence type are GENE_SUMMARY, MUTATION_SUMMARY, TUMOR_TYPE_SUMMARY, PROGNOSTIC_SUMMARY, DIAGNOSTIC_SUMMARY, ONCOGENIC, MUTATION_EFFECT, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE. For multiple evidence types query, use &#39;,&#39; as separator. (optional)
     * @return IndicatorQueryResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public IndicatorQueryResp annotateCopyNumberAlterationsGetUsingGET(String copyNameAlterationType, String hugoSymbol, Integer entrezGeneId, String referenceGenome, String tumorType, String evidenceType) throws ApiException {
        ApiResponse<IndicatorQueryResp> localVarResp = annotateCopyNumberAlterationsGetUsingGETWithHttpInfo(copyNameAlterationType, hugoSymbol, entrezGeneId, referenceGenome, tumorType, evidenceType);
        return localVarResp.getData();
    }

    /**
     * annotateCopyNumberAlterationsGet
     * Annotate copy number alteration.
     * @param copyNameAlterationType Copy number alteration type (required)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. Example: BRAF (optional)
     * @param entrezGeneId The entrez gene ID. (Higher priority than hugoSymbol). Example: 673 (optional)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param tumorType OncoTree(http://oncotree.info) tumor type name. The field supports OncoTree Code, OncoTree Name and OncoTree Main type. Example: Melanoma (optional)
     * @param evidenceType Evidence type to compute. This could help to improve the performance if you only look for sub-content. Example: ONCOGENIC. All available evidence type are GENE_SUMMARY, MUTATION_SUMMARY, TUMOR_TYPE_SUMMARY, PROGNOSTIC_SUMMARY, DIAGNOSTIC_SUMMARY, ONCOGENIC, MUTATION_EFFECT, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE. For multiple evidence types query, use &#39;,&#39; as separator. (optional)
     * @return ApiResponse&lt;IndicatorQueryResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IndicatorQueryResp> annotateCopyNumberAlterationsGetUsingGETWithHttpInfo(String copyNameAlterationType, String hugoSymbol, Integer entrezGeneId, String referenceGenome, String tumorType, String evidenceType) throws ApiException {
        okhttp3.Call localVarCall = annotateCopyNumberAlterationsGetUsingGETValidateBeforeCall(copyNameAlterationType, hugoSymbol, entrezGeneId, referenceGenome, tumorType, evidenceType, null);
        Type localVarReturnType = new TypeToken<IndicatorQueryResp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * annotateCopyNumberAlterationsGet (asynchronously)
     * Annotate copy number alteration.
     * @param copyNameAlterationType Copy number alteration type (required)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. Example: BRAF (optional)
     * @param entrezGeneId The entrez gene ID. (Higher priority than hugoSymbol). Example: 673 (optional)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param tumorType OncoTree(http://oncotree.info) tumor type name. The field supports OncoTree Code, OncoTree Name and OncoTree Main type. Example: Melanoma (optional)
     * @param evidenceType Evidence type to compute. This could help to improve the performance if you only look for sub-content. Example: ONCOGENIC. All available evidence type are GENE_SUMMARY, MUTATION_SUMMARY, TUMOR_TYPE_SUMMARY, PROGNOSTIC_SUMMARY, DIAGNOSTIC_SUMMARY, ONCOGENIC, MUTATION_EFFECT, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE. For multiple evidence types query, use &#39;,&#39; as separator. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotateCopyNumberAlterationsGetUsingGETAsync(String copyNameAlterationType, String hugoSymbol, Integer entrezGeneId, String referenceGenome, String tumorType, String evidenceType, final ApiCallback<IndicatorQueryResp> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotateCopyNumberAlterationsGetUsingGETValidateBeforeCall(copyNameAlterationType, hugoSymbol, entrezGeneId, referenceGenome, tumorType, evidenceType, _callback);
        Type localVarReturnType = new TypeToken<IndicatorQueryResp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annotateCopyNumberAlterationsPostUsingPOST
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotateCopyNumberAlterationsPostUsingPOSTCall(List<AnnotateCopyNumberAlterationQuery> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/annotate/copyNumberAlterations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotateCopyNumberAlterationsPostUsingPOSTValidateBeforeCall(List<AnnotateCopyNumberAlterationQuery> body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling annotateCopyNumberAlterationsPostUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = annotateCopyNumberAlterationsPostUsingPOSTCall(body, _callback);
        return localVarCall;

    }

    /**
     * annotateCopyNumberAlterationsPost
     * Annotate copy number alterations.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @return List&lt;IndicatorQueryResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public List<IndicatorQueryResp> annotateCopyNumberAlterationsPostUsingPOST(List<AnnotateCopyNumberAlterationQuery> body) throws ApiException {
        ApiResponse<List<IndicatorQueryResp>> localVarResp = annotateCopyNumberAlterationsPostUsingPOSTWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * annotateCopyNumberAlterationsPost
     * Annotate copy number alterations.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @return ApiResponse&lt;List&lt;IndicatorQueryResp&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IndicatorQueryResp>> annotateCopyNumberAlterationsPostUsingPOSTWithHttpInfo(List<AnnotateCopyNumberAlterationQuery> body) throws ApiException {
        okhttp3.Call localVarCall = annotateCopyNumberAlterationsPostUsingPOSTValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<List<IndicatorQueryResp>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * annotateCopyNumberAlterationsPost (asynchronously)
     * Annotate copy number alterations.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotateCopyNumberAlterationsPostUsingPOSTAsync(List<AnnotateCopyNumberAlterationQuery> body, final ApiCallback<List<IndicatorQueryResp>> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotateCopyNumberAlterationsPostUsingPOSTValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<List<IndicatorQueryResp>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annotateMutationsByGenomicChangeGetUsingGET
     * @param genomicLocation Genomic location. Example: 7,140453136,140453136,A,T (required)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param tumorType OncoTree(http://oncotree.info) tumor type name. The field supports OncoTree Code, OncoTree Name and OncoTree Main type. Example: Melanoma (optional)
     * @param evidenceType Evidence type to compute. This could help to improve the performance if you only look for sub-content. Example: ONCOGENIC. All available evidence type are GENE_SUMMARY, MUTATION_SUMMARY, TUMOR_TYPE_SUMMARY, PROGNOSTIC_SUMMARY, DIAGNOSTIC_SUMMARY, ONCOGENIC, MUTATION_EFFECT, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE. For multiple evidence types query, use &#39;,&#39; as separator. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotateMutationsByGenomicChangeGetUsingGETCall(String genomicLocation, String referenceGenome, String tumorType, String evidenceType, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotate/mutations/byGenomicChange";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (genomicLocation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genomicLocation", genomicLocation));
        }

        if (referenceGenome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("referenceGenome", referenceGenome));
        }

        if (tumorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tumorType", tumorType));
        }

        if (evidenceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidenceType", evidenceType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotateMutationsByGenomicChangeGetUsingGETValidateBeforeCall(String genomicLocation, String referenceGenome, String tumorType, String evidenceType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'genomicLocation' is set
        if (genomicLocation == null) {
            throw new ApiException("Missing the required parameter 'genomicLocation' when calling annotateMutationsByGenomicChangeGetUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = annotateMutationsByGenomicChangeGetUsingGETCall(genomicLocation, referenceGenome, tumorType, evidenceType, _callback);
        return localVarCall;

    }

    /**
     * annotateMutationsByGenomicChangeGet
     * Annotate mutation by genomic change.
     * @param genomicLocation Genomic location. Example: 7,140453136,140453136,A,T (required)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param tumorType OncoTree(http://oncotree.info) tumor type name. The field supports OncoTree Code, OncoTree Name and OncoTree Main type. Example: Melanoma (optional)
     * @param evidenceType Evidence type to compute. This could help to improve the performance if you only look for sub-content. Example: ONCOGENIC. All available evidence type are GENE_SUMMARY, MUTATION_SUMMARY, TUMOR_TYPE_SUMMARY, PROGNOSTIC_SUMMARY, DIAGNOSTIC_SUMMARY, ONCOGENIC, MUTATION_EFFECT, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE. For multiple evidence types query, use &#39;,&#39; as separator. (optional)
     * @return IndicatorQueryResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public IndicatorQueryResp annotateMutationsByGenomicChangeGetUsingGET(String genomicLocation, String referenceGenome, String tumorType, String evidenceType) throws ApiException {
        ApiResponse<IndicatorQueryResp> localVarResp = annotateMutationsByGenomicChangeGetUsingGETWithHttpInfo(genomicLocation, referenceGenome, tumorType, evidenceType);
        return localVarResp.getData();
    }

    /**
     * annotateMutationsByGenomicChangeGet
     * Annotate mutation by genomic change.
     * @param genomicLocation Genomic location. Example: 7,140453136,140453136,A,T (required)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param tumorType OncoTree(http://oncotree.info) tumor type name. The field supports OncoTree Code, OncoTree Name and OncoTree Main type. Example: Melanoma (optional)
     * @param evidenceType Evidence type to compute. This could help to improve the performance if you only look for sub-content. Example: ONCOGENIC. All available evidence type are GENE_SUMMARY, MUTATION_SUMMARY, TUMOR_TYPE_SUMMARY, PROGNOSTIC_SUMMARY, DIAGNOSTIC_SUMMARY, ONCOGENIC, MUTATION_EFFECT, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE. For multiple evidence types query, use &#39;,&#39; as separator. (optional)
     * @return ApiResponse&lt;IndicatorQueryResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IndicatorQueryResp> annotateMutationsByGenomicChangeGetUsingGETWithHttpInfo(String genomicLocation, String referenceGenome, String tumorType, String evidenceType) throws ApiException {
        okhttp3.Call localVarCall = annotateMutationsByGenomicChangeGetUsingGETValidateBeforeCall(genomicLocation, referenceGenome, tumorType, evidenceType, null);
        Type localVarReturnType = new TypeToken<IndicatorQueryResp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * annotateMutationsByGenomicChangeGet (asynchronously)
     * Annotate mutation by genomic change.
     * @param genomicLocation Genomic location. Example: 7,140453136,140453136,A,T (required)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param tumorType OncoTree(http://oncotree.info) tumor type name. The field supports OncoTree Code, OncoTree Name and OncoTree Main type. Example: Melanoma (optional)
     * @param evidenceType Evidence type to compute. This could help to improve the performance if you only look for sub-content. Example: ONCOGENIC. All available evidence type are GENE_SUMMARY, MUTATION_SUMMARY, TUMOR_TYPE_SUMMARY, PROGNOSTIC_SUMMARY, DIAGNOSTIC_SUMMARY, ONCOGENIC, MUTATION_EFFECT, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE. For multiple evidence types query, use &#39;,&#39; as separator. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotateMutationsByGenomicChangeGetUsingGETAsync(String genomicLocation, String referenceGenome, String tumorType, String evidenceType, final ApiCallback<IndicatorQueryResp> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotateMutationsByGenomicChangeGetUsingGETValidateBeforeCall(genomicLocation, referenceGenome, tumorType, evidenceType, _callback);
        Type localVarReturnType = new TypeToken<IndicatorQueryResp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annotateMutationsByGenomicChangePostUsingPOST
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotateMutationsByGenomicChangePostUsingPOSTCall(List<AnnotateMutationByGenomicChangeQuery> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/annotate/mutations/byGenomicChange";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotateMutationsByGenomicChangePostUsingPOSTValidateBeforeCall(List<AnnotateMutationByGenomicChangeQuery> body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling annotateMutationsByGenomicChangePostUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = annotateMutationsByGenomicChangePostUsingPOSTCall(body, _callback);
        return localVarCall;

    }

    /**
     * annotateMutationsByGenomicChangePost
     * Annotate mutations by genomic change.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @return List&lt;IndicatorQueryResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public List<IndicatorQueryResp> annotateMutationsByGenomicChangePostUsingPOST(List<AnnotateMutationByGenomicChangeQuery> body) throws ApiException {
        ApiResponse<List<IndicatorQueryResp>> localVarResp = annotateMutationsByGenomicChangePostUsingPOSTWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * annotateMutationsByGenomicChangePost
     * Annotate mutations by genomic change.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @return ApiResponse&lt;List&lt;IndicatorQueryResp&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IndicatorQueryResp>> annotateMutationsByGenomicChangePostUsingPOSTWithHttpInfo(List<AnnotateMutationByGenomicChangeQuery> body) throws ApiException {
        okhttp3.Call localVarCall = annotateMutationsByGenomicChangePostUsingPOSTValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<List<IndicatorQueryResp>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * annotateMutationsByGenomicChangePost (asynchronously)
     * Annotate mutations by genomic change.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotateMutationsByGenomicChangePostUsingPOSTAsync(List<AnnotateMutationByGenomicChangeQuery> body, final ApiCallback<List<IndicatorQueryResp>> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotateMutationsByGenomicChangePostUsingPOSTValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<List<IndicatorQueryResp>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annotateMutationsByHGVSgGetUsingGET
     * @param hgvsg HGVS genomic format. Example: 7:g.140453136A&gt;T (required)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param tumorType OncoTree(http://oncotree.info) tumor type name. The field supports OncoTree Code, OncoTree Name and OncoTree Main type. Example: Melanoma (optional)
     * @param evidenceType Evidence type to compute. This could help to improve the performance if you only look for sub-content. Example: ONCOGENIC. All available evidence type are GENE_SUMMARY, MUTATION_SUMMARY, TUMOR_TYPE_SUMMARY, PROGNOSTIC_SUMMARY, DIAGNOSTIC_SUMMARY, ONCOGENIC, MUTATION_EFFECT, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE. For multiple evidence types query, use &#39;,&#39; as separator. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotateMutationsByHGVSgGetUsingGETCall(String hgvsg, String referenceGenome, String tumorType, String evidenceType, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotate/mutations/byHGVSg";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hgvsg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hgvsg", hgvsg));
        }

        if (referenceGenome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("referenceGenome", referenceGenome));
        }

        if (tumorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tumorType", tumorType));
        }

        if (evidenceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidenceType", evidenceType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotateMutationsByHGVSgGetUsingGETValidateBeforeCall(String hgvsg, String referenceGenome, String tumorType, String evidenceType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'hgvsg' is set
        if (hgvsg == null) {
            throw new ApiException("Missing the required parameter 'hgvsg' when calling annotateMutationsByHGVSgGetUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = annotateMutationsByHGVSgGetUsingGETCall(hgvsg, referenceGenome, tumorType, evidenceType, _callback);
        return localVarCall;

    }

    /**
     * annotateMutationsByHGVSgGet
     * Annotate mutation by HGVSg.
     * @param hgvsg HGVS genomic format. Example: 7:g.140453136A&gt;T (required)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param tumorType OncoTree(http://oncotree.info) tumor type name. The field supports OncoTree Code, OncoTree Name and OncoTree Main type. Example: Melanoma (optional)
     * @param evidenceType Evidence type to compute. This could help to improve the performance if you only look for sub-content. Example: ONCOGENIC. All available evidence type are GENE_SUMMARY, MUTATION_SUMMARY, TUMOR_TYPE_SUMMARY, PROGNOSTIC_SUMMARY, DIAGNOSTIC_SUMMARY, ONCOGENIC, MUTATION_EFFECT, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE. For multiple evidence types query, use &#39;,&#39; as separator. (optional)
     * @return IndicatorQueryResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public IndicatorQueryResp annotateMutationsByHGVSgGetUsingGET(String hgvsg, String referenceGenome, String tumorType, String evidenceType) throws ApiException {
        ApiResponse<IndicatorQueryResp> localVarResp = annotateMutationsByHGVSgGetUsingGETWithHttpInfo(hgvsg, referenceGenome, tumorType, evidenceType);
        return localVarResp.getData();
    }

    /**
     * annotateMutationsByHGVSgGet
     * Annotate mutation by HGVSg.
     * @param hgvsg HGVS genomic format. Example: 7:g.140453136A&gt;T (required)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param tumorType OncoTree(http://oncotree.info) tumor type name. The field supports OncoTree Code, OncoTree Name and OncoTree Main type. Example: Melanoma (optional)
     * @param evidenceType Evidence type to compute. This could help to improve the performance if you only look for sub-content. Example: ONCOGENIC. All available evidence type are GENE_SUMMARY, MUTATION_SUMMARY, TUMOR_TYPE_SUMMARY, PROGNOSTIC_SUMMARY, DIAGNOSTIC_SUMMARY, ONCOGENIC, MUTATION_EFFECT, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE. For multiple evidence types query, use &#39;,&#39; as separator. (optional)
     * @return ApiResponse&lt;IndicatorQueryResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IndicatorQueryResp> annotateMutationsByHGVSgGetUsingGETWithHttpInfo(String hgvsg, String referenceGenome, String tumorType, String evidenceType) throws ApiException {
        okhttp3.Call localVarCall = annotateMutationsByHGVSgGetUsingGETValidateBeforeCall(hgvsg, referenceGenome, tumorType, evidenceType, null);
        Type localVarReturnType = new TypeToken<IndicatorQueryResp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * annotateMutationsByHGVSgGet (asynchronously)
     * Annotate mutation by HGVSg.
     * @param hgvsg HGVS genomic format. Example: 7:g.140453136A&gt;T (required)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param tumorType OncoTree(http://oncotree.info) tumor type name. The field supports OncoTree Code, OncoTree Name and OncoTree Main type. Example: Melanoma (optional)
     * @param evidenceType Evidence type to compute. This could help to improve the performance if you only look for sub-content. Example: ONCOGENIC. All available evidence type are GENE_SUMMARY, MUTATION_SUMMARY, TUMOR_TYPE_SUMMARY, PROGNOSTIC_SUMMARY, DIAGNOSTIC_SUMMARY, ONCOGENIC, MUTATION_EFFECT, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE. For multiple evidence types query, use &#39;,&#39; as separator. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotateMutationsByHGVSgGetUsingGETAsync(String hgvsg, String referenceGenome, String tumorType, String evidenceType, final ApiCallback<IndicatorQueryResp> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotateMutationsByHGVSgGetUsingGETValidateBeforeCall(hgvsg, referenceGenome, tumorType, evidenceType, _callback);
        Type localVarReturnType = new TypeToken<IndicatorQueryResp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annotateMutationsByHGVSgPostUsingPOST
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotateMutationsByHGVSgPostUsingPOSTCall(List<AnnotateMutationByHGVSgQuery> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/annotate/mutations/byHGVSg";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotateMutationsByHGVSgPostUsingPOSTValidateBeforeCall(List<AnnotateMutationByHGVSgQuery> body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling annotateMutationsByHGVSgPostUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = annotateMutationsByHGVSgPostUsingPOSTCall(body, _callback);
        return localVarCall;

    }

    /**
     * annotateMutationsByHGVSgPost
     * Annotate mutations by genomic change.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @return List&lt;IndicatorQueryResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public List<IndicatorQueryResp> annotateMutationsByHGVSgPostUsingPOST(List<AnnotateMutationByHGVSgQuery> body) throws ApiException {
        ApiResponse<List<IndicatorQueryResp>> localVarResp = annotateMutationsByHGVSgPostUsingPOSTWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * annotateMutationsByHGVSgPost
     * Annotate mutations by genomic change.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @return ApiResponse&lt;List&lt;IndicatorQueryResp&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IndicatorQueryResp>> annotateMutationsByHGVSgPostUsingPOSTWithHttpInfo(List<AnnotateMutationByHGVSgQuery> body) throws ApiException {
        okhttp3.Call localVarCall = annotateMutationsByHGVSgPostUsingPOSTValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<List<IndicatorQueryResp>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * annotateMutationsByHGVSgPost (asynchronously)
     * Annotate mutations by genomic change.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotateMutationsByHGVSgPostUsingPOSTAsync(List<AnnotateMutationByHGVSgQuery> body, final ApiCallback<List<IndicatorQueryResp>> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotateMutationsByHGVSgPostUsingPOSTValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<List<IndicatorQueryResp>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annotateMutationsByProteinChangeGetUsingGET
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. Example: BRAF (optional)
     * @param entrezGeneId The entrez gene ID. (Higher priority than hugoSymbol). Example: 673 (optional)
     * @param alteration Protein Change. Example: V600E (optional)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param consequence Consequence. Exacmple: missense_variant (optional)
     * @param proteinStart Protein Start. Example: 600 (optional)
     * @param proteinEnd Protein End. Example: 600 (optional)
     * @param tumorType OncoTree(http://oncotree.info) tumor type name. The field supports OncoTree Code, OncoTree Name and OncoTree Main type. Example: Melanoma (optional)
     * @param evidenceType Evidence type to compute. This could help to improve the performance if you only look for sub-content. Example: ONCOGENIC. All available evidence type are GENE_SUMMARY, MUTATION_SUMMARY, TUMOR_TYPE_SUMMARY, PROGNOSTIC_SUMMARY, DIAGNOSTIC_SUMMARY, ONCOGENIC, MUTATION_EFFECT, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE. For multiple evidence types query, use &#39;,&#39; as separator. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotateMutationsByProteinChangeGetUsingGETCall(String hugoSymbol, Integer entrezGeneId, String alteration, String referenceGenome, String consequence, Integer proteinStart, Integer proteinEnd, String tumorType, String evidenceType, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotate/mutations/byProteinChange";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hugoSymbol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hugoSymbol", hugoSymbol));
        }

        if (entrezGeneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entrezGeneId", entrezGeneId));
        }

        if (alteration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alteration", alteration));
        }

        if (referenceGenome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("referenceGenome", referenceGenome));
        }

        if (consequence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("consequence", consequence));
        }

        if (proteinStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proteinStart", proteinStart));
        }

        if (proteinEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proteinEnd", proteinEnd));
        }

        if (tumorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tumorType", tumorType));
        }

        if (evidenceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidenceType", evidenceType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotateMutationsByProteinChangeGetUsingGETValidateBeforeCall(String hugoSymbol, Integer entrezGeneId, String alteration, String referenceGenome, String consequence, Integer proteinStart, Integer proteinEnd, String tumorType, String evidenceType, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = annotateMutationsByProteinChangeGetUsingGETCall(hugoSymbol, entrezGeneId, alteration, referenceGenome, consequence, proteinStart, proteinEnd, tumorType, evidenceType, _callback);
        return localVarCall;

    }

    /**
     * annotateMutationsByProteinChangeGet
     * Annotate mutation by protein change.
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. Example: BRAF (optional)
     * @param entrezGeneId The entrez gene ID. (Higher priority than hugoSymbol). Example: 673 (optional)
     * @param alteration Protein Change. Example: V600E (optional)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param consequence Consequence. Exacmple: missense_variant (optional)
     * @param proteinStart Protein Start. Example: 600 (optional)
     * @param proteinEnd Protein End. Example: 600 (optional)
     * @param tumorType OncoTree(http://oncotree.info) tumor type name. The field supports OncoTree Code, OncoTree Name and OncoTree Main type. Example: Melanoma (optional)
     * @param evidenceType Evidence type to compute. This could help to improve the performance if you only look for sub-content. Example: ONCOGENIC. All available evidence type are GENE_SUMMARY, MUTATION_SUMMARY, TUMOR_TYPE_SUMMARY, PROGNOSTIC_SUMMARY, DIAGNOSTIC_SUMMARY, ONCOGENIC, MUTATION_EFFECT, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE. For multiple evidence types query, use &#39;,&#39; as separator. (optional)
     * @return IndicatorQueryResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public IndicatorQueryResp annotateMutationsByProteinChangeGetUsingGET(String hugoSymbol, Integer entrezGeneId, String alteration, String referenceGenome, String consequence, Integer proteinStart, Integer proteinEnd, String tumorType, String evidenceType) throws ApiException {
        ApiResponse<IndicatorQueryResp> localVarResp = annotateMutationsByProteinChangeGetUsingGETWithHttpInfo(hugoSymbol, entrezGeneId, alteration, referenceGenome, consequence, proteinStart, proteinEnd, tumorType, evidenceType);
        return localVarResp.getData();
    }

    /**
     * annotateMutationsByProteinChangeGet
     * Annotate mutation by protein change.
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. Example: BRAF (optional)
     * @param entrezGeneId The entrez gene ID. (Higher priority than hugoSymbol). Example: 673 (optional)
     * @param alteration Protein Change. Example: V600E (optional)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param consequence Consequence. Exacmple: missense_variant (optional)
     * @param proteinStart Protein Start. Example: 600 (optional)
     * @param proteinEnd Protein End. Example: 600 (optional)
     * @param tumorType OncoTree(http://oncotree.info) tumor type name. The field supports OncoTree Code, OncoTree Name and OncoTree Main type. Example: Melanoma (optional)
     * @param evidenceType Evidence type to compute. This could help to improve the performance if you only look for sub-content. Example: ONCOGENIC. All available evidence type are GENE_SUMMARY, MUTATION_SUMMARY, TUMOR_TYPE_SUMMARY, PROGNOSTIC_SUMMARY, DIAGNOSTIC_SUMMARY, ONCOGENIC, MUTATION_EFFECT, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE. For multiple evidence types query, use &#39;,&#39; as separator. (optional)
     * @return ApiResponse&lt;IndicatorQueryResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IndicatorQueryResp> annotateMutationsByProteinChangeGetUsingGETWithHttpInfo(String hugoSymbol, Integer entrezGeneId, String alteration, String referenceGenome, String consequence, Integer proteinStart, Integer proteinEnd, String tumorType, String evidenceType) throws ApiException {
        okhttp3.Call localVarCall = annotateMutationsByProteinChangeGetUsingGETValidateBeforeCall(hugoSymbol, entrezGeneId, alteration, referenceGenome, consequence, proteinStart, proteinEnd, tumorType, evidenceType, null);
        Type localVarReturnType = new TypeToken<IndicatorQueryResp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * annotateMutationsByProteinChangeGet (asynchronously)
     * Annotate mutation by protein change.
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. Example: BRAF (optional)
     * @param entrezGeneId The entrez gene ID. (Higher priority than hugoSymbol). Example: 673 (optional)
     * @param alteration Protein Change. Example: V600E (optional)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param consequence Consequence. Exacmple: missense_variant (optional)
     * @param proteinStart Protein Start. Example: 600 (optional)
     * @param proteinEnd Protein End. Example: 600 (optional)
     * @param tumorType OncoTree(http://oncotree.info) tumor type name. The field supports OncoTree Code, OncoTree Name and OncoTree Main type. Example: Melanoma (optional)
     * @param evidenceType Evidence type to compute. This could help to improve the performance if you only look for sub-content. Example: ONCOGENIC. All available evidence type are GENE_SUMMARY, MUTATION_SUMMARY, TUMOR_TYPE_SUMMARY, PROGNOSTIC_SUMMARY, DIAGNOSTIC_SUMMARY, ONCOGENIC, MUTATION_EFFECT, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE. For multiple evidence types query, use &#39;,&#39; as separator. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotateMutationsByProteinChangeGetUsingGETAsync(String hugoSymbol, Integer entrezGeneId, String alteration, String referenceGenome, String consequence, Integer proteinStart, Integer proteinEnd, String tumorType, String evidenceType, final ApiCallback<IndicatorQueryResp> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotateMutationsByProteinChangeGetUsingGETValidateBeforeCall(hugoSymbol, entrezGeneId, alteration, referenceGenome, consequence, proteinStart, proteinEnd, tumorType, evidenceType, _callback);
        Type localVarReturnType = new TypeToken<IndicatorQueryResp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annotateMutationsByProteinChangePostUsingPOST
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotateMutationsByProteinChangePostUsingPOSTCall(List<AnnotateMutationByProteinChangeQuery> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/annotate/mutations/byProteinChange";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotateMutationsByProteinChangePostUsingPOSTValidateBeforeCall(List<AnnotateMutationByProteinChangeQuery> body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling annotateMutationsByProteinChangePostUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = annotateMutationsByProteinChangePostUsingPOSTCall(body, _callback);
        return localVarCall;

    }

    /**
     * annotateMutationsByProteinChangePost
     * Annotate mutations by protein change.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @return List&lt;IndicatorQueryResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public List<IndicatorQueryResp> annotateMutationsByProteinChangePostUsingPOST(List<AnnotateMutationByProteinChangeQuery> body) throws ApiException {
        ApiResponse<List<IndicatorQueryResp>> localVarResp = annotateMutationsByProteinChangePostUsingPOSTWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * annotateMutationsByProteinChangePost
     * Annotate mutations by protein change.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @return ApiResponse&lt;List&lt;IndicatorQueryResp&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IndicatorQueryResp>> annotateMutationsByProteinChangePostUsingPOSTWithHttpInfo(List<AnnotateMutationByProteinChangeQuery> body) throws ApiException {
        okhttp3.Call localVarCall = annotateMutationsByProteinChangePostUsingPOSTValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<List<IndicatorQueryResp>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * annotateMutationsByProteinChangePost (asynchronously)
     * Annotate mutations by protein change.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotateMutationsByProteinChangePostUsingPOSTAsync(List<AnnotateMutationByProteinChangeQuery> body, final ApiCallback<List<IndicatorQueryResp>> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotateMutationsByProteinChangePostUsingPOSTValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<List<IndicatorQueryResp>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annotateStructuralVariantsGetUsingGET
     * @param structuralVariantType Structural variant type (required)
     * @param isFunctionalFusion Whether is functional fusion (required)
     * @param hugoSymbolA The gene symbol A used in Human Genome Organisation. Example: ABL1 (optional)
     * @param entrezGeneIdA The entrez gene ID A. (Higher priority than hugoSymbolA) Example: 25 (optional)
     * @param hugoSymbolB The gene symbol B used in Human Genome Organisation.Example: BCR  (optional)
     * @param entrezGeneIdB The entrez gene ID B. (Higher priority than hugoSymbolB) Example: 613 (optional)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param tumorType OncoTree(http://oncotree.info) tumor type name. The field supports OncoTree Code, OncoTree Name and OncoTree Main type. Example: Melanoma (optional)
     * @param evidenceType Evidence type to compute. This could help to improve the performance if you only look for sub-content. Example: ONCOGENIC. All available evidence type are GENE_SUMMARY, MUTATION_SUMMARY, TUMOR_TYPE_SUMMARY, PROGNOSTIC_SUMMARY, DIAGNOSTIC_SUMMARY, ONCOGENIC, MUTATION_EFFECT, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE. For multiple evidence types query, use &#39;,&#39; as separator. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotateStructuralVariantsGetUsingGETCall(String structuralVariantType, Boolean isFunctionalFusion, String hugoSymbolA, Integer entrezGeneIdA, String hugoSymbolB, Integer entrezGeneIdB, String referenceGenome, String tumorType, String evidenceType, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotate/structuralVariants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hugoSymbolA != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hugoSymbolA", hugoSymbolA));
        }

        if (entrezGeneIdA != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entrezGeneIdA", entrezGeneIdA));
        }

        if (hugoSymbolB != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hugoSymbolB", hugoSymbolB));
        }

        if (entrezGeneIdB != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entrezGeneIdB", entrezGeneIdB));
        }

        if (structuralVariantType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("structuralVariantType", structuralVariantType));
        }

        if (isFunctionalFusion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isFunctionalFusion", isFunctionalFusion));
        }

        if (referenceGenome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("referenceGenome", referenceGenome));
        }

        if (tumorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tumorType", tumorType));
        }

        if (evidenceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evidenceType", evidenceType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotateStructuralVariantsGetUsingGETValidateBeforeCall(String structuralVariantType, Boolean isFunctionalFusion, String hugoSymbolA, Integer entrezGeneIdA, String hugoSymbolB, Integer entrezGeneIdB, String referenceGenome, String tumorType, String evidenceType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'structuralVariantType' is set
        if (structuralVariantType == null) {
            throw new ApiException("Missing the required parameter 'structuralVariantType' when calling annotateStructuralVariantsGetUsingGET(Async)");
        }
        
        // verify the required parameter 'isFunctionalFusion' is set
        if (isFunctionalFusion == null) {
            throw new ApiException("Missing the required parameter 'isFunctionalFusion' when calling annotateStructuralVariantsGetUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = annotateStructuralVariantsGetUsingGETCall(structuralVariantType, isFunctionalFusion, hugoSymbolA, entrezGeneIdA, hugoSymbolB, entrezGeneIdB, referenceGenome, tumorType, evidenceType, _callback);
        return localVarCall;

    }

    /**
     * annotateStructuralVariantsGet
     * Annotate structural variant.
     * @param structuralVariantType Structural variant type (required)
     * @param isFunctionalFusion Whether is functional fusion (required)
     * @param hugoSymbolA The gene symbol A used in Human Genome Organisation. Example: ABL1 (optional)
     * @param entrezGeneIdA The entrez gene ID A. (Higher priority than hugoSymbolA) Example: 25 (optional)
     * @param hugoSymbolB The gene symbol B used in Human Genome Organisation.Example: BCR  (optional)
     * @param entrezGeneIdB The entrez gene ID B. (Higher priority than hugoSymbolB) Example: 613 (optional)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param tumorType OncoTree(http://oncotree.info) tumor type name. The field supports OncoTree Code, OncoTree Name and OncoTree Main type. Example: Melanoma (optional)
     * @param evidenceType Evidence type to compute. This could help to improve the performance if you only look for sub-content. Example: ONCOGENIC. All available evidence type are GENE_SUMMARY, MUTATION_SUMMARY, TUMOR_TYPE_SUMMARY, PROGNOSTIC_SUMMARY, DIAGNOSTIC_SUMMARY, ONCOGENIC, MUTATION_EFFECT, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE. For multiple evidence types query, use &#39;,&#39; as separator. (optional)
     * @return IndicatorQueryResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public IndicatorQueryResp annotateStructuralVariantsGetUsingGET(String structuralVariantType, Boolean isFunctionalFusion, String hugoSymbolA, Integer entrezGeneIdA, String hugoSymbolB, Integer entrezGeneIdB, String referenceGenome, String tumorType, String evidenceType) throws ApiException {
        ApiResponse<IndicatorQueryResp> localVarResp = annotateStructuralVariantsGetUsingGETWithHttpInfo(structuralVariantType, isFunctionalFusion, hugoSymbolA, entrezGeneIdA, hugoSymbolB, entrezGeneIdB, referenceGenome, tumorType, evidenceType);
        return localVarResp.getData();
    }

    /**
     * annotateStructuralVariantsGet
     * Annotate structural variant.
     * @param structuralVariantType Structural variant type (required)
     * @param isFunctionalFusion Whether is functional fusion (required)
     * @param hugoSymbolA The gene symbol A used in Human Genome Organisation. Example: ABL1 (optional)
     * @param entrezGeneIdA The entrez gene ID A. (Higher priority than hugoSymbolA) Example: 25 (optional)
     * @param hugoSymbolB The gene symbol B used in Human Genome Organisation.Example: BCR  (optional)
     * @param entrezGeneIdB The entrez gene ID B. (Higher priority than hugoSymbolB) Example: 613 (optional)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param tumorType OncoTree(http://oncotree.info) tumor type name. The field supports OncoTree Code, OncoTree Name and OncoTree Main type. Example: Melanoma (optional)
     * @param evidenceType Evidence type to compute. This could help to improve the performance if you only look for sub-content. Example: ONCOGENIC. All available evidence type are GENE_SUMMARY, MUTATION_SUMMARY, TUMOR_TYPE_SUMMARY, PROGNOSTIC_SUMMARY, DIAGNOSTIC_SUMMARY, ONCOGENIC, MUTATION_EFFECT, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE. For multiple evidence types query, use &#39;,&#39; as separator. (optional)
     * @return ApiResponse&lt;IndicatorQueryResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IndicatorQueryResp> annotateStructuralVariantsGetUsingGETWithHttpInfo(String structuralVariantType, Boolean isFunctionalFusion, String hugoSymbolA, Integer entrezGeneIdA, String hugoSymbolB, Integer entrezGeneIdB, String referenceGenome, String tumorType, String evidenceType) throws ApiException {
        okhttp3.Call localVarCall = annotateStructuralVariantsGetUsingGETValidateBeforeCall(structuralVariantType, isFunctionalFusion, hugoSymbolA, entrezGeneIdA, hugoSymbolB, entrezGeneIdB, referenceGenome, tumorType, evidenceType, null);
        Type localVarReturnType = new TypeToken<IndicatorQueryResp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * annotateStructuralVariantsGet (asynchronously)
     * Annotate structural variant.
     * @param structuralVariantType Structural variant type (required)
     * @param isFunctionalFusion Whether is functional fusion (required)
     * @param hugoSymbolA The gene symbol A used in Human Genome Organisation. Example: ABL1 (optional)
     * @param entrezGeneIdA The entrez gene ID A. (Higher priority than hugoSymbolA) Example: 25 (optional)
     * @param hugoSymbolB The gene symbol B used in Human Genome Organisation.Example: BCR  (optional)
     * @param entrezGeneIdB The entrez gene ID B. (Higher priority than hugoSymbolB) Example: 613 (optional)
     * @param referenceGenome Reference genome, either GRCh37 or GRCh38. The default is GRCh37 (optional, default to GRCh37)
     * @param tumorType OncoTree(http://oncotree.info) tumor type name. The field supports OncoTree Code, OncoTree Name and OncoTree Main type. Example: Melanoma (optional)
     * @param evidenceType Evidence type to compute. This could help to improve the performance if you only look for sub-content. Example: ONCOGENIC. All available evidence type are GENE_SUMMARY, MUTATION_SUMMARY, TUMOR_TYPE_SUMMARY, PROGNOSTIC_SUMMARY, DIAGNOSTIC_SUMMARY, ONCOGENIC, MUTATION_EFFECT, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE. For multiple evidence types query, use &#39;,&#39; as separator. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotateStructuralVariantsGetUsingGETAsync(String structuralVariantType, Boolean isFunctionalFusion, String hugoSymbolA, Integer entrezGeneIdA, String hugoSymbolB, Integer entrezGeneIdB, String referenceGenome, String tumorType, String evidenceType, final ApiCallback<IndicatorQueryResp> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotateStructuralVariantsGetUsingGETValidateBeforeCall(structuralVariantType, isFunctionalFusion, hugoSymbolA, entrezGeneIdA, hugoSymbolB, entrezGeneIdB, referenceGenome, tumorType, evidenceType, _callback);
        Type localVarReturnType = new TypeToken<IndicatorQueryResp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annotateStructuralVariantsPostUsingPOST
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotateStructuralVariantsPostUsingPOSTCall(List<AnnotateStructuralVariantQuery> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/annotate/structuralVariants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotateStructuralVariantsPostUsingPOSTValidateBeforeCall(List<AnnotateStructuralVariantQuery> body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling annotateStructuralVariantsPostUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = annotateStructuralVariantsPostUsingPOSTCall(body, _callback);
        return localVarCall;

    }

    /**
     * annotateStructuralVariantsPost
     * Annotate structural variants.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @return List&lt;IndicatorQueryResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public List<IndicatorQueryResp> annotateStructuralVariantsPostUsingPOST(List<AnnotateStructuralVariantQuery> body) throws ApiException {
        ApiResponse<List<IndicatorQueryResp>> localVarResp = annotateStructuralVariantsPostUsingPOSTWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * annotateStructuralVariantsPost
     * Annotate structural variants.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @return ApiResponse&lt;List&lt;IndicatorQueryResp&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IndicatorQueryResp>> annotateStructuralVariantsPostUsingPOSTWithHttpInfo(List<AnnotateStructuralVariantQuery> body) throws ApiException {
        okhttp3.Call localVarCall = annotateStructuralVariantsPostUsingPOSTValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<List<IndicatorQueryResp>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * annotateStructuralVariantsPost (asynchronously)
     * Annotate structural variants.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error, error message will be given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotateStructuralVariantsPostUsingPOSTAsync(List<AnnotateStructuralVariantQuery> body, final ApiCallback<List<IndicatorQueryResp>> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotateStructuralVariantsPostUsingPOSTValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<List<IndicatorQueryResp>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
