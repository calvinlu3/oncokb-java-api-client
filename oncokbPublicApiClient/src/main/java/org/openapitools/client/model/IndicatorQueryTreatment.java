/*
 * OncoKB APIs
 * OncoKB, a comprehensive and curated precision oncology knowledge base, offers oncologists detailed, evidence-based information about individual somatic mutations and structural alterations present in patient tumors with the goal of supporting optimal treatment decisions.
 *
 * The version of the OpenAPI document: v1.5.0
 * Contact: contact@oncokb.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ArticleAbstract;
import org.openapitools.client.model.Drug;
import org.openapitools.client.model.TumorType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IndicatorQueryTreatment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T16:00:42.192711-05:00[America/New_York]", comments = "Generator version: 7.11.0")
public class IndicatorQueryTreatment {
  public static final String SERIALIZED_NAME_ABSTRACTS = "abstracts";
  @SerializedName(SERIALIZED_NAME_ABSTRACTS)
  @javax.annotation.Nullable
  private List<ArticleAbstract> abstracts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALTERATIONS = "alterations";
  @SerializedName(SERIALIZED_NAME_ALTERATIONS)
  @javax.annotation.Nullable
  private List<String> alterations = new ArrayList<>();

  public static final String SERIALIZED_NAME_APPROVED_INDICATIONS = "approvedIndications";
  @SerializedName(SERIALIZED_NAME_APPROVED_INDICATIONS)
  @javax.annotation.Nullable
  private List<String> approvedIndications = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_DRUGS = "drugs";
  @SerializedName(SERIALIZED_NAME_DRUGS)
  @javax.annotation.Nullable
  private List<Drug> drugs = new ArrayList<>();

  /**
   * FDA level associated with implication
   */
  @JsonAdapter(FdaLevelEnum.Adapter.class)
  public enum FdaLevelEnum {
    LEVEL_1("LEVEL_1"),
    
    LEVEL_2("LEVEL_2"),
    
    LEVEL_3_A("LEVEL_3A"),
    
    LEVEL_3_B("LEVEL_3B"),
    
    LEVEL_4("LEVEL_4"),
    
    LEVEL_R1("LEVEL_R1"),
    
    LEVEL_R2("LEVEL_R2"),
    
    LEVEL_PX1("LEVEL_Px1"),
    
    LEVEL_PX2("LEVEL_Px2"),
    
    LEVEL_PX3("LEVEL_Px3"),
    
    LEVEL_DX1("LEVEL_Dx1"),
    
    LEVEL_DX2("LEVEL_Dx2"),
    
    LEVEL_DX3("LEVEL_Dx3"),
    
    LEVEL_FDA1("LEVEL_Fda1"),
    
    LEVEL_FDA2("LEVEL_Fda2"),
    
    LEVEL_FDA3("LEVEL_Fda3"),
    
    NO("NO");

    private String value;

    FdaLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FdaLevelEnum fromValue(String value) {
      for (FdaLevelEnum b : FdaLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FdaLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FdaLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FdaLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FdaLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FdaLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FDA_LEVEL = "fdaLevel";
  @SerializedName(SERIALIZED_NAME_FDA_LEVEL)
  @javax.annotation.Nullable
  private FdaLevelEnum fdaLevel;

  /**
   * Therapeutic level associated with implication
   */
  @JsonAdapter(LevelEnum.Adapter.class)
  public enum LevelEnum {
    LEVEL_1("LEVEL_1"),
    
    LEVEL_2("LEVEL_2"),
    
    LEVEL_3_A("LEVEL_3A"),
    
    LEVEL_3_B("LEVEL_3B"),
    
    LEVEL_4("LEVEL_4"),
    
    LEVEL_R1("LEVEL_R1"),
    
    LEVEL_R2("LEVEL_R2"),
    
    LEVEL_PX1("LEVEL_Px1"),
    
    LEVEL_PX2("LEVEL_Px2"),
    
    LEVEL_PX3("LEVEL_Px3"),
    
    LEVEL_DX1("LEVEL_Dx1"),
    
    LEVEL_DX2("LEVEL_Dx2"),
    
    LEVEL_DX3("LEVEL_Dx3"),
    
    LEVEL_FDA1("LEVEL_Fda1"),
    
    LEVEL_FDA2("LEVEL_Fda2"),
    
    LEVEL_FDA3("LEVEL_Fda3"),
    
    NO("NO");

    private String value;

    LevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LevelEnum fromValue(String value) {
      for (LevelEnum b : LevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  @javax.annotation.Nullable
  private LevelEnum level;

  public static final String SERIALIZED_NAME_LEVEL_ASSOCIATED_CANCER_TYPE = "levelAssociatedCancerType";
  @SerializedName(SERIALIZED_NAME_LEVEL_ASSOCIATED_CANCER_TYPE)
  @javax.annotation.Nullable
  private TumorType levelAssociatedCancerType;

  public static final String SERIALIZED_NAME_LEVEL_EXCLUDED_CANCER_TYPES = "levelExcludedCancerTypes";
  @SerializedName(SERIALIZED_NAME_LEVEL_EXCLUDED_CANCER_TYPES)
  @javax.annotation.Nullable
  private List<TumorType> levelExcludedCancerTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PMIDS = "pmids";
  @SerializedName(SERIALIZED_NAME_PMIDS)
  @javax.annotation.Nullable
  private List<String> pmids = new ArrayList<>();

  public IndicatorQueryTreatment() {
  }

  public IndicatorQueryTreatment abstracts(@javax.annotation.Nullable List<ArticleAbstract> abstracts) {
    this.abstracts = abstracts;
    return this;
  }

  public IndicatorQueryTreatment addAbstractsItem(ArticleAbstract abstractsItem) {
    if (this.abstracts == null) {
      this.abstracts = new ArrayList<>();
    }
    this.abstracts.add(abstractsItem);
    return this;
  }

  /**
   * List of abstracts cited in the treatment description. Defaulted to empty list
   * @return abstracts
   */
  @javax.annotation.Nullable
  public List<ArticleAbstract> getAbstracts() {
    return abstracts;
  }

  public void setAbstracts(@javax.annotation.Nullable List<ArticleAbstract> abstracts) {
    this.abstracts = abstracts;
  }


  public IndicatorQueryTreatment alterations(@javax.annotation.Nullable List<String> alterations) {
    this.alterations = alterations;
    return this;
  }

  public IndicatorQueryTreatment addAlterationsItem(String alterationsItem) {
    if (this.alterations == null) {
      this.alterations = new ArrayList<>();
    }
    this.alterations.add(alterationsItem);
    return this;
  }

  /**
   * List of alterations associated with therapeutic implication
   * @return alterations
   */
  @javax.annotation.Nullable
  public List<String> getAlterations() {
    return alterations;
  }

  public void setAlterations(@javax.annotation.Nullable List<String> alterations) {
    this.alterations = alterations;
  }


  public IndicatorQueryTreatment approvedIndications(@javax.annotation.Nullable List<String> approvedIndications) {
    this.approvedIndications = approvedIndications;
    return this;
  }

  public IndicatorQueryTreatment addApprovedIndicationsItem(String approvedIndicationsItem) {
    if (this.approvedIndications == null) {
      this.approvedIndications = new ArrayList<>();
    }
    this.approvedIndications.add(approvedIndicationsItem);
    return this;
  }

  /**
   * DEPRECATED
   * @return approvedIndications
   */
  @javax.annotation.Nullable
  public List<String> getApprovedIndications() {
    return approvedIndications;
  }

  public void setApprovedIndications(@javax.annotation.Nullable List<String> approvedIndications) {
    this.approvedIndications = approvedIndications;
  }


  public IndicatorQueryTreatment description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Treatment description. Defaulted to \&quot;\&quot;
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public IndicatorQueryTreatment drugs(@javax.annotation.Nullable List<Drug> drugs) {
    this.drugs = drugs;
    return this;
  }

  public IndicatorQueryTreatment addDrugsItem(Drug drugsItem) {
    if (this.drugs == null) {
      this.drugs = new ArrayList<>();
    }
    this.drugs.add(drugsItem);
    return this;
  }

  /**
   * List of drugs associated with therapeutic implication
   * @return drugs
   */
  @javax.annotation.Nullable
  public List<Drug> getDrugs() {
    return drugs;
  }

  public void setDrugs(@javax.annotation.Nullable List<Drug> drugs) {
    this.drugs = drugs;
  }


  public IndicatorQueryTreatment fdaLevel(@javax.annotation.Nullable FdaLevelEnum fdaLevel) {
    this.fdaLevel = fdaLevel;
    return this;
  }

  /**
   * FDA level associated with implication
   * @return fdaLevel
   */
  @javax.annotation.Nullable
  public FdaLevelEnum getFdaLevel() {
    return fdaLevel;
  }

  public void setFdaLevel(@javax.annotation.Nullable FdaLevelEnum fdaLevel) {
    this.fdaLevel = fdaLevel;
  }


  public IndicatorQueryTreatment level(@javax.annotation.Nullable LevelEnum level) {
    this.level = level;
    return this;
  }

  /**
   * Therapeutic level associated with implication
   * @return level
   */
  @javax.annotation.Nullable
  public LevelEnum getLevel() {
    return level;
  }

  public void setLevel(@javax.annotation.Nullable LevelEnum level) {
    this.level = level;
  }


  public IndicatorQueryTreatment levelAssociatedCancerType(@javax.annotation.Nullable TumorType levelAssociatedCancerType) {
    this.levelAssociatedCancerType = levelAssociatedCancerType;
    return this;
  }

  /**
   * Get levelAssociatedCancerType
   * @return levelAssociatedCancerType
   */
  @javax.annotation.Nullable
  public TumorType getLevelAssociatedCancerType() {
    return levelAssociatedCancerType;
  }

  public void setLevelAssociatedCancerType(@javax.annotation.Nullable TumorType levelAssociatedCancerType) {
    this.levelAssociatedCancerType = levelAssociatedCancerType;
  }


  public IndicatorQueryTreatment levelExcludedCancerTypes(@javax.annotation.Nullable List<TumorType> levelExcludedCancerTypes) {
    this.levelExcludedCancerTypes = levelExcludedCancerTypes;
    return this;
  }

  public IndicatorQueryTreatment addLevelExcludedCancerTypesItem(TumorType levelExcludedCancerTypesItem) {
    if (this.levelExcludedCancerTypes == null) {
      this.levelExcludedCancerTypes = new ArrayList<>();
    }
    this.levelExcludedCancerTypes.add(levelExcludedCancerTypesItem);
    return this;
  }

  /**
   * Excluded cancer types. Defaulted to empty list
   * @return levelExcludedCancerTypes
   */
  @javax.annotation.Nullable
  public List<TumorType> getLevelExcludedCancerTypes() {
    return levelExcludedCancerTypes;
  }

  public void setLevelExcludedCancerTypes(@javax.annotation.Nullable List<TumorType> levelExcludedCancerTypes) {
    this.levelExcludedCancerTypes = levelExcludedCancerTypes;
  }


  public IndicatorQueryTreatment pmids(@javax.annotation.Nullable List<String> pmids) {
    this.pmids = pmids;
    return this;
  }

  public IndicatorQueryTreatment addPmidsItem(String pmidsItem) {
    if (this.pmids == null) {
      this.pmids = new ArrayList<>();
    }
    this.pmids.add(pmidsItem);
    return this;
  }

  /**
   * List of PubMed IDs cited in the treatment description. Defaulted to empty list
   * @return pmids
   */
  @javax.annotation.Nullable
  public List<String> getPmids() {
    return pmids;
  }

  public void setPmids(@javax.annotation.Nullable List<String> pmids) {
    this.pmids = pmids;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndicatorQueryTreatment indicatorQueryTreatment = (IndicatorQueryTreatment) o;
    return Objects.equals(this.abstracts, indicatorQueryTreatment.abstracts) &&
        Objects.equals(this.alterations, indicatorQueryTreatment.alterations) &&
        Objects.equals(this.approvedIndications, indicatorQueryTreatment.approvedIndications) &&
        Objects.equals(this.description, indicatorQueryTreatment.description) &&
        Objects.equals(this.drugs, indicatorQueryTreatment.drugs) &&
        Objects.equals(this.fdaLevel, indicatorQueryTreatment.fdaLevel) &&
        Objects.equals(this.level, indicatorQueryTreatment.level) &&
        Objects.equals(this.levelAssociatedCancerType, indicatorQueryTreatment.levelAssociatedCancerType) &&
        Objects.equals(this.levelExcludedCancerTypes, indicatorQueryTreatment.levelExcludedCancerTypes) &&
        Objects.equals(this.pmids, indicatorQueryTreatment.pmids);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abstracts, alterations, approvedIndications, description, drugs, fdaLevel, level, levelAssociatedCancerType, levelExcludedCancerTypes, pmids);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndicatorQueryTreatment {\n");
    sb.append("    abstracts: ").append(toIndentedString(abstracts)).append("\n");
    sb.append("    alterations: ").append(toIndentedString(alterations)).append("\n");
    sb.append("    approvedIndications: ").append(toIndentedString(approvedIndications)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    drugs: ").append(toIndentedString(drugs)).append("\n");
    sb.append("    fdaLevel: ").append(toIndentedString(fdaLevel)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    levelAssociatedCancerType: ").append(toIndentedString(levelAssociatedCancerType)).append("\n");
    sb.append("    levelExcludedCancerTypes: ").append(toIndentedString(levelExcludedCancerTypes)).append("\n");
    sb.append("    pmids: ").append(toIndentedString(pmids)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abstracts");
    openapiFields.add("alterations");
    openapiFields.add("approvedIndications");
    openapiFields.add("description");
    openapiFields.add("drugs");
    openapiFields.add("fdaLevel");
    openapiFields.add("level");
    openapiFields.add("levelAssociatedCancerType");
    openapiFields.add("levelExcludedCancerTypes");
    openapiFields.add("pmids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IndicatorQueryTreatment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IndicatorQueryTreatment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IndicatorQueryTreatment is not found in the empty JSON string", IndicatorQueryTreatment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IndicatorQueryTreatment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IndicatorQueryTreatment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("abstracts") != null && !jsonObj.get("abstracts").isJsonNull()) {
        JsonArray jsonArrayabstracts = jsonObj.getAsJsonArray("abstracts");
        if (jsonArrayabstracts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("abstracts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `abstracts` to be an array in the JSON string but got `%s`", jsonObj.get("abstracts").toString()));
          }

          // validate the optional field `abstracts` (array)
          for (int i = 0; i < jsonArrayabstracts.size(); i++) {
            ArticleAbstract.validateJsonElement(jsonArrayabstracts.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("alterations") != null && !jsonObj.get("alterations").isJsonNull() && !jsonObj.get("alterations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alterations` to be an array in the JSON string but got `%s`", jsonObj.get("alterations").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("approvedIndications") != null && !jsonObj.get("approvedIndications").isJsonNull() && !jsonObj.get("approvedIndications").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvedIndications` to be an array in the JSON string but got `%s`", jsonObj.get("approvedIndications").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("drugs") != null && !jsonObj.get("drugs").isJsonNull()) {
        JsonArray jsonArraydrugs = jsonObj.getAsJsonArray("drugs");
        if (jsonArraydrugs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("drugs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `drugs` to be an array in the JSON string but got `%s`", jsonObj.get("drugs").toString()));
          }

          // validate the optional field `drugs` (array)
          for (int i = 0; i < jsonArraydrugs.size(); i++) {
            Drug.validateJsonElement(jsonArraydrugs.get(i));
          };
        }
      }
      if ((jsonObj.get("fdaLevel") != null && !jsonObj.get("fdaLevel").isJsonNull()) && !jsonObj.get("fdaLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fdaLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fdaLevel").toString()));
      }
      // validate the optional field `fdaLevel`
      if (jsonObj.get("fdaLevel") != null && !jsonObj.get("fdaLevel").isJsonNull()) {
        FdaLevelEnum.validateJsonElement(jsonObj.get("fdaLevel"));
      }
      if ((jsonObj.get("level") != null && !jsonObj.get("level").isJsonNull()) && !jsonObj.get("level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("level").toString()));
      }
      // validate the optional field `level`
      if (jsonObj.get("level") != null && !jsonObj.get("level").isJsonNull()) {
        LevelEnum.validateJsonElement(jsonObj.get("level"));
      }
      // validate the optional field `levelAssociatedCancerType`
      if (jsonObj.get("levelAssociatedCancerType") != null && !jsonObj.get("levelAssociatedCancerType").isJsonNull()) {
        TumorType.validateJsonElement(jsonObj.get("levelAssociatedCancerType"));
      }
      if (jsonObj.get("levelExcludedCancerTypes") != null && !jsonObj.get("levelExcludedCancerTypes").isJsonNull()) {
        JsonArray jsonArraylevelExcludedCancerTypes = jsonObj.getAsJsonArray("levelExcludedCancerTypes");
        if (jsonArraylevelExcludedCancerTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("levelExcludedCancerTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `levelExcludedCancerTypes` to be an array in the JSON string but got `%s`", jsonObj.get("levelExcludedCancerTypes").toString()));
          }

          // validate the optional field `levelExcludedCancerTypes` (array)
          for (int i = 0; i < jsonArraylevelExcludedCancerTypes.size(); i++) {
            TumorType.validateJsonElement(jsonArraylevelExcludedCancerTypes.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pmids") != null && !jsonObj.get("pmids").isJsonNull() && !jsonObj.get("pmids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pmids` to be an array in the JSON string but got `%s`", jsonObj.get("pmids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IndicatorQueryTreatment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IndicatorQueryTreatment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IndicatorQueryTreatment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IndicatorQueryTreatment.class));

       return (TypeAdapter<T>) new TypeAdapter<IndicatorQueryTreatment>() {
           @Override
           public void write(JsonWriter out, IndicatorQueryTreatment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IndicatorQueryTreatment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IndicatorQueryTreatment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IndicatorQueryTreatment
   * @throws IOException if the JSON string is invalid with respect to IndicatorQueryTreatment
   */
  public static IndicatorQueryTreatment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IndicatorQueryTreatment.class);
  }

  /**
   * Convert an instance of IndicatorQueryTreatment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

