/*
 * OncoKB APIs
 * OncoKB, a comprehensive and curated precision oncology knowledge base, offers oncologists detailed, evidence-based information about individual somatic mutations and structural alterations present in patient tumors with the goal of supporting optimal treatment decisions.
 *
 * The version of the OpenAPI document: v1.5.0
 * Contact: contact@oncokb.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SemVer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T16:13:52.565252-05:00[America/New_York]", comments = "Generator version: 7.11.0")
public class SemVer {
  public static final String SERIALIZED_NAME_MAJOR = "major";
  @SerializedName(SERIALIZED_NAME_MAJOR)
  @javax.annotation.Nullable
  private Integer major;

  public static final String SERIALIZED_NAME_MINOR = "minor";
  @SerializedName(SERIALIZED_NAME_MINOR)
  @javax.annotation.Nullable
  private Integer minor;

  public static final String SERIALIZED_NAME_PATCH = "patch";
  @SerializedName(SERIALIZED_NAME_PATCH)
  @javax.annotation.Nullable
  private Integer patch;

  public static final String SERIALIZED_NAME_STABLE = "stable";
  @SerializedName(SERIALIZED_NAME_STABLE)
  @javax.annotation.Nullable
  private Boolean stable;

  public static final String SERIALIZED_NAME_SUFFIX_TOKENS = "suffixTokens";
  @SerializedName(SERIALIZED_NAME_SUFFIX_TOKENS)
  @javax.annotation.Nullable
  private List<String> suffixTokens = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nullable
  private String version;

  public SemVer() {
  }

  public SemVer major(@javax.annotation.Nullable Integer major) {
    this.major = major;
    return this;
  }

  /**
   * Get major
   * @return major
   */
  @javax.annotation.Nullable
  public Integer getMajor() {
    return major;
  }

  public void setMajor(@javax.annotation.Nullable Integer major) {
    this.major = major;
  }


  public SemVer minor(@javax.annotation.Nullable Integer minor) {
    this.minor = minor;
    return this;
  }

  /**
   * Get minor
   * @return minor
   */
  @javax.annotation.Nullable
  public Integer getMinor() {
    return minor;
  }

  public void setMinor(@javax.annotation.Nullable Integer minor) {
    this.minor = minor;
  }


  public SemVer patch(@javax.annotation.Nullable Integer patch) {
    this.patch = patch;
    return this;
  }

  /**
   * Get patch
   * @return patch
   */
  @javax.annotation.Nullable
  public Integer getPatch() {
    return patch;
  }

  public void setPatch(@javax.annotation.Nullable Integer patch) {
    this.patch = patch;
  }


  public SemVer stable(@javax.annotation.Nullable Boolean stable) {
    this.stable = stable;
    return this;
  }

  /**
   * Get stable
   * @return stable
   */
  @javax.annotation.Nullable
  public Boolean getStable() {
    return stable;
  }

  public void setStable(@javax.annotation.Nullable Boolean stable) {
    this.stable = stable;
  }


  public SemVer suffixTokens(@javax.annotation.Nullable List<String> suffixTokens) {
    this.suffixTokens = suffixTokens;
    return this;
  }

  public SemVer addSuffixTokensItem(String suffixTokensItem) {
    if (this.suffixTokens == null) {
      this.suffixTokens = new ArrayList<>();
    }
    this.suffixTokens.add(suffixTokensItem);
    return this;
  }

  /**
   * Get suffixTokens
   * @return suffixTokens
   */
  @javax.annotation.Nullable
  public List<String> getSuffixTokens() {
    return suffixTokens;
  }

  public void setSuffixTokens(@javax.annotation.Nullable List<String> suffixTokens) {
    this.suffixTokens = suffixTokens;
  }


  public SemVer version(@javax.annotation.Nullable String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nullable String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SemVer semVer = (SemVer) o;
    return Objects.equals(this.major, semVer.major) &&
        Objects.equals(this.minor, semVer.minor) &&
        Objects.equals(this.patch, semVer.patch) &&
        Objects.equals(this.stable, semVer.stable) &&
        Objects.equals(this.suffixTokens, semVer.suffixTokens) &&
        Objects.equals(this.version, semVer.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(major, minor, patch, stable, suffixTokens, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SemVer {\n");
    sb.append("    major: ").append(toIndentedString(major)).append("\n");
    sb.append("    minor: ").append(toIndentedString(minor)).append("\n");
    sb.append("    patch: ").append(toIndentedString(patch)).append("\n");
    sb.append("    stable: ").append(toIndentedString(stable)).append("\n");
    sb.append("    suffixTokens: ").append(toIndentedString(suffixTokens)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("major");
    openapiFields.add("minor");
    openapiFields.add("patch");
    openapiFields.add("stable");
    openapiFields.add("suffixTokens");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SemVer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SemVer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SemVer is not found in the empty JSON string", SemVer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SemVer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SemVer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("suffixTokens") != null && !jsonObj.get("suffixTokens").isJsonNull() && !jsonObj.get("suffixTokens").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `suffixTokens` to be an array in the JSON string but got `%s`", jsonObj.get("suffixTokens").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SemVer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SemVer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SemVer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SemVer.class));

       return (TypeAdapter<T>) new TypeAdapter<SemVer>() {
           @Override
           public void write(JsonWriter out, SemVer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SemVer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SemVer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SemVer
   * @throws IOException if the JSON string is invalid with respect to SemVer
   */
  public static SemVer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SemVer.class);
  }

  /**
   * Convert an instance of SemVer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

