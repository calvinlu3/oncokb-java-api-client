/*
 * OncoKB APIs
 * OncoKB, a comprehensive and curated precision oncology knowledge base, offers oncologists detailed, evidence-based information about individual somatic mutations and structural alterations present in patient tumors with the goal of supporting optimal treatment decisions.
 *
 * The version of the OpenAPI document: v1.5.0
 * Contact: contact@oncokb.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Implication;
import org.openapitools.client.model.IndicatorQueryTreatment;
import org.openapitools.client.model.MutationEffectResp;
import org.openapitools.client.model.Query;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IndicatorQueryResp
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T16:13:52.565252-05:00[America/New_York]", comments = "Generator version: 7.11.0")
public class IndicatorQueryResp {
  public static final String SERIALIZED_NAME_ALLELE_EXIST = "alleleExist";
  @SerializedName(SERIALIZED_NAME_ALLELE_EXIST)
  @javax.annotation.Nullable
  private Boolean alleleExist;

  public static final String SERIALIZED_NAME_DATA_VERSION = "dataVersion";
  @SerializedName(SERIALIZED_NAME_DATA_VERSION)
  @javax.annotation.Nullable
  private String dataVersion;

  public static final String SERIALIZED_NAME_DIAGNOSTIC_IMPLICATIONS = "diagnosticImplications";
  @SerializedName(SERIALIZED_NAME_DIAGNOSTIC_IMPLICATIONS)
  @javax.annotation.Nullable
  private List<Implication> diagnosticImplications = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIAGNOSTIC_SUMMARY = "diagnosticSummary";
  @SerializedName(SERIALIZED_NAME_DIAGNOSTIC_SUMMARY)
  @javax.annotation.Nullable
  private String diagnosticSummary;

  public static final String SERIALIZED_NAME_GENE_EXIST = "geneExist";
  @SerializedName(SERIALIZED_NAME_GENE_EXIST)
  @javax.annotation.Nullable
  private Boolean geneExist;

  public static final String SERIALIZED_NAME_GENE_SUMMARY = "geneSummary";
  @SerializedName(SERIALIZED_NAME_GENE_SUMMARY)
  @javax.annotation.Nullable
  private String geneSummary;

  /**
   * (Nullable) The highest diagnostic level from a list of diagnostic evidences.
   */
  @JsonAdapter(HighestDiagnosticImplicationLevelEnum.Adapter.class)
  public enum HighestDiagnosticImplicationLevelEnum {
    LEVEL_DX1("LEVEL_Dx1"),
    
    LEVEL_DX2("LEVEL_Dx2"),
    
    LEVEL_DX3_("LEVEL_Dx3.");

    private String value;

    HighestDiagnosticImplicationLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HighestDiagnosticImplicationLevelEnum fromValue(String value) {
      for (HighestDiagnosticImplicationLevelEnum b : HighestDiagnosticImplicationLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HighestDiagnosticImplicationLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HighestDiagnosticImplicationLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HighestDiagnosticImplicationLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HighestDiagnosticImplicationLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HighestDiagnosticImplicationLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HIGHEST_DIAGNOSTIC_IMPLICATION_LEVEL = "highestDiagnosticImplicationLevel";
  @SerializedName(SERIALIZED_NAME_HIGHEST_DIAGNOSTIC_IMPLICATION_LEVEL)
  @javax.annotation.Nullable
  private HighestDiagnosticImplicationLevelEnum highestDiagnosticImplicationLevel;

  /**
   * (Nullable) The highest FDA level from a list of therapeutic evidences.
   */
  @JsonAdapter(HighestFdaLevelEnum.Adapter.class)
  public enum HighestFdaLevelEnum {
    LEVEL_FDA1("LEVEL_Fda1"),
    
    LEVEL_FDA2("LEVEL_Fda2"),
    
    LEVEL_FDA3("LEVEL_Fda3");

    private String value;

    HighestFdaLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HighestFdaLevelEnum fromValue(String value) {
      for (HighestFdaLevelEnum b : HighestFdaLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HighestFdaLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HighestFdaLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HighestFdaLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HighestFdaLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HighestFdaLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HIGHEST_FDA_LEVEL = "highestFdaLevel";
  @SerializedName(SERIALIZED_NAME_HIGHEST_FDA_LEVEL)
  @javax.annotation.Nullable
  private HighestFdaLevelEnum highestFdaLevel;

  /**
   * (Nullable) The highest prognostic level from a list of prognostic evidences.
   */
  @JsonAdapter(HighestPrognosticImplicationLevelEnum.Adapter.class)
  public enum HighestPrognosticImplicationLevelEnum {
    LEVEL_PX1("LEVEL_Px1"),
    
    LEVEL_PX2("LEVEL_Px2"),
    
    LEVEL_PX3("LEVEL_Px3");

    private String value;

    HighestPrognosticImplicationLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HighestPrognosticImplicationLevelEnum fromValue(String value) {
      for (HighestPrognosticImplicationLevelEnum b : HighestPrognosticImplicationLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HighestPrognosticImplicationLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HighestPrognosticImplicationLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HighestPrognosticImplicationLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HighestPrognosticImplicationLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HighestPrognosticImplicationLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HIGHEST_PROGNOSTIC_IMPLICATION_LEVEL = "highestPrognosticImplicationLevel";
  @SerializedName(SERIALIZED_NAME_HIGHEST_PROGNOSTIC_IMPLICATION_LEVEL)
  @javax.annotation.Nullable
  private HighestPrognosticImplicationLevelEnum highestPrognosticImplicationLevel;

  /**
   * (Nullable) The highest resistance level from a list of therapeutic evidences.
   */
  @JsonAdapter(HighestResistanceLevelEnum.Adapter.class)
  public enum HighestResistanceLevelEnum {
    LEVEL_R1("LEVEL_R1"),
    
    LEVEL_R2("LEVEL_R2");

    private String value;

    HighestResistanceLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HighestResistanceLevelEnum fromValue(String value) {
      for (HighestResistanceLevelEnum b : HighestResistanceLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HighestResistanceLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HighestResistanceLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HighestResistanceLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HighestResistanceLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HighestResistanceLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HIGHEST_RESISTANCE_LEVEL = "highestResistanceLevel";
  @SerializedName(SERIALIZED_NAME_HIGHEST_RESISTANCE_LEVEL)
  @javax.annotation.Nullable
  private HighestResistanceLevelEnum highestResistanceLevel;

  /**
   * (Nullable) The highest sensitivity level from a list of therapeutic evidences.
   */
  @JsonAdapter(HighestSensitiveLevelEnum.Adapter.class)
  public enum HighestSensitiveLevelEnum {
    LEVEL_1("LEVEL_1"),
    
    LEVEL_2("LEVEL_2"),
    
    LEVEL_3_A("LEVEL_3A"),
    
    LEVEL_3_B("LEVEL_3B"),
    
    LEVEL_4("LEVEL_4");

    private String value;

    HighestSensitiveLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HighestSensitiveLevelEnum fromValue(String value) {
      for (HighestSensitiveLevelEnum b : HighestSensitiveLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HighestSensitiveLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HighestSensitiveLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HighestSensitiveLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HighestSensitiveLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HighestSensitiveLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HIGHEST_SENSITIVE_LEVEL = "highestSensitiveLevel";
  @SerializedName(SERIALIZED_NAME_HIGHEST_SENSITIVE_LEVEL)
  @javax.annotation.Nullable
  private HighestSensitiveLevelEnum highestSensitiveLevel;

  public static final String SERIALIZED_NAME_HOTSPOT = "hotspot";
  @SerializedName(SERIALIZED_NAME_HOTSPOT)
  @javax.annotation.Nullable
  private Boolean hotspot;

  public static final String SERIALIZED_NAME_LAST_UPDATE = "lastUpdate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE)
  @javax.annotation.Nullable
  private String lastUpdate;

  public static final String SERIALIZED_NAME_MUTATION_EFFECT = "mutationEffect";
  @SerializedName(SERIALIZED_NAME_MUTATION_EFFECT)
  @javax.annotation.Nullable
  private MutationEffectResp mutationEffect;

  /**
   * The oncogenicity status of the variant. Defaulted to \&quot;Unknown\&quot;.
   */
  @JsonAdapter(OncogenicEnum.Adapter.class)
  public enum OncogenicEnum {
    ONCOGENIC("Oncogenic"),
    
    LIKELY_ONCOGENIC("Likely Oncogenic"),
    
    LIKELY_NEUTRAL("Likely Neutral"),
    
    INCONCLUSIVE("Inconclusive"),
    
    RESISTANCE("Resistance"),
    
    UNKNOWN("Unknown");

    private String value;

    OncogenicEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OncogenicEnum fromValue(String value) {
      for (OncogenicEnum b : OncogenicEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OncogenicEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OncogenicEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OncogenicEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OncogenicEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OncogenicEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ONCOGENIC = "oncogenic";
  @SerializedName(SERIALIZED_NAME_ONCOGENIC)
  @javax.annotation.Nullable
  private OncogenicEnum oncogenic;

  /**
   * Gets or Sets otherSignificantResistanceLevels
   */
  @JsonAdapter(OtherSignificantResistanceLevelsEnum.Adapter.class)
  public enum OtherSignificantResistanceLevelsEnum {
    LEVEL_1("LEVEL_1"),
    
    LEVEL_2("LEVEL_2"),
    
    LEVEL_3_A("LEVEL_3A"),
    
    LEVEL_3_B("LEVEL_3B"),
    
    LEVEL_4("LEVEL_4"),
    
    LEVEL_R1("LEVEL_R1"),
    
    LEVEL_R2("LEVEL_R2"),
    
    LEVEL_PX1("LEVEL_Px1"),
    
    LEVEL_PX2("LEVEL_Px2"),
    
    LEVEL_PX3("LEVEL_Px3"),
    
    LEVEL_DX1("LEVEL_Dx1"),
    
    LEVEL_DX2("LEVEL_Dx2"),
    
    LEVEL_DX3("LEVEL_Dx3"),
    
    LEVEL_FDA1("LEVEL_Fda1"),
    
    LEVEL_FDA2("LEVEL_Fda2"),
    
    LEVEL_FDA3("LEVEL_Fda3"),
    
    NO("NO");

    private String value;

    OtherSignificantResistanceLevelsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OtherSignificantResistanceLevelsEnum fromValue(String value) {
      for (OtherSignificantResistanceLevelsEnum b : OtherSignificantResistanceLevelsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OtherSignificantResistanceLevelsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OtherSignificantResistanceLevelsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OtherSignificantResistanceLevelsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OtherSignificantResistanceLevelsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OtherSignificantResistanceLevelsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OTHER_SIGNIFICANT_RESISTANCE_LEVELS = "otherSignificantResistanceLevels";
  @SerializedName(SERIALIZED_NAME_OTHER_SIGNIFICANT_RESISTANCE_LEVELS)
  @javax.annotation.Nullable
  private List<OtherSignificantResistanceLevelsEnum> otherSignificantResistanceLevels = new ArrayList<>();

  /**
   * Gets or Sets otherSignificantSensitiveLevels
   */
  @JsonAdapter(OtherSignificantSensitiveLevelsEnum.Adapter.class)
  public enum OtherSignificantSensitiveLevelsEnum {
    LEVEL_1("LEVEL_1"),
    
    LEVEL_2("LEVEL_2"),
    
    LEVEL_3_A("LEVEL_3A"),
    
    LEVEL_3_B("LEVEL_3B"),
    
    LEVEL_4("LEVEL_4"),
    
    LEVEL_R1("LEVEL_R1"),
    
    LEVEL_R2("LEVEL_R2"),
    
    LEVEL_PX1("LEVEL_Px1"),
    
    LEVEL_PX2("LEVEL_Px2"),
    
    LEVEL_PX3("LEVEL_Px3"),
    
    LEVEL_DX1("LEVEL_Dx1"),
    
    LEVEL_DX2("LEVEL_Dx2"),
    
    LEVEL_DX3("LEVEL_Dx3"),
    
    LEVEL_FDA1("LEVEL_Fda1"),
    
    LEVEL_FDA2("LEVEL_Fda2"),
    
    LEVEL_FDA3("LEVEL_Fda3"),
    
    NO("NO");

    private String value;

    OtherSignificantSensitiveLevelsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OtherSignificantSensitiveLevelsEnum fromValue(String value) {
      for (OtherSignificantSensitiveLevelsEnum b : OtherSignificantSensitiveLevelsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OtherSignificantSensitiveLevelsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OtherSignificantSensitiveLevelsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OtherSignificantSensitiveLevelsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OtherSignificantSensitiveLevelsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OtherSignificantSensitiveLevelsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OTHER_SIGNIFICANT_SENSITIVE_LEVELS = "otherSignificantSensitiveLevels";
  @SerializedName(SERIALIZED_NAME_OTHER_SIGNIFICANT_SENSITIVE_LEVELS)
  @javax.annotation.Nullable
  private List<OtherSignificantSensitiveLevelsEnum> otherSignificantSensitiveLevels = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROGNOSTIC_IMPLICATIONS = "prognosticImplications";
  @SerializedName(SERIALIZED_NAME_PROGNOSTIC_IMPLICATIONS)
  @javax.annotation.Nullable
  private List<Implication> prognosticImplications = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROGNOSTIC_SUMMARY = "prognosticSummary";
  @SerializedName(SERIALIZED_NAME_PROGNOSTIC_SUMMARY)
  @javax.annotation.Nullable
  private String prognosticSummary;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  @javax.annotation.Nullable
  private Query query;

  public static final String SERIALIZED_NAME_TREATMENTS = "treatments";
  @SerializedName(SERIALIZED_NAME_TREATMENTS)
  @javax.annotation.Nullable
  private List<IndicatorQueryTreatment> treatments = new ArrayList<>();

  public static final String SERIALIZED_NAME_TUMOR_TYPE_SUMMARY = "tumorTypeSummary";
  @SerializedName(SERIALIZED_NAME_TUMOR_TYPE_SUMMARY)
  @javax.annotation.Nullable
  private String tumorTypeSummary;

  public static final String SERIALIZED_NAME_VARIANT_EXIST = "variantExist";
  @SerializedName(SERIALIZED_NAME_VARIANT_EXIST)
  @javax.annotation.Nullable
  private Boolean variantExist;

  public static final String SERIALIZED_NAME_VARIANT_SUMMARY = "variantSummary";
  @SerializedName(SERIALIZED_NAME_VARIANT_SUMMARY)
  @javax.annotation.Nullable
  private String variantSummary;

  public static final String SERIALIZED_NAME_VUS = "vus";
  @SerializedName(SERIALIZED_NAME_VUS)
  @javax.annotation.Nullable
  private Boolean vus;

  public IndicatorQueryResp() {
  }

  public IndicatorQueryResp alleleExist(@javax.annotation.Nullable Boolean alleleExist) {
    this.alleleExist = alleleExist;
    return this;
  }

  /**
   * Indicates whether the alternate allele has been curated. See SOP Protocol 9.1
   * @return alleleExist
   */
  @javax.annotation.Nullable
  public Boolean getAlleleExist() {
    return alleleExist;
  }

  public void setAlleleExist(@javax.annotation.Nullable Boolean alleleExist) {
    this.alleleExist = alleleExist;
  }


  public IndicatorQueryResp dataVersion(@javax.annotation.Nullable String dataVersion) {
    this.dataVersion = dataVersion;
    return this;
  }

  /**
   * OncoKB data version. See www.oncokb.org/news
   * @return dataVersion
   */
  @javax.annotation.Nullable
  public String getDataVersion() {
    return dataVersion;
  }

  public void setDataVersion(@javax.annotation.Nullable String dataVersion) {
    this.dataVersion = dataVersion;
  }


  public IndicatorQueryResp diagnosticImplications(@javax.annotation.Nullable List<Implication> diagnosticImplications) {
    this.diagnosticImplications = diagnosticImplications;
    return this;
  }

  public IndicatorQueryResp addDiagnosticImplicationsItem(Implication diagnosticImplicationsItem) {
    if (this.diagnosticImplications == null) {
      this.diagnosticImplications = new ArrayList<>();
    }
    this.diagnosticImplications.add(diagnosticImplicationsItem);
    return this;
  }

  /**
   * List of diagnostic implications. Defaulted to empty list
   * @return diagnosticImplications
   */
  @javax.annotation.Nullable
  public List<Implication> getDiagnosticImplications() {
    return diagnosticImplications;
  }

  public void setDiagnosticImplications(@javax.annotation.Nullable List<Implication> diagnosticImplications) {
    this.diagnosticImplications = diagnosticImplications;
  }


  public IndicatorQueryResp diagnosticSummary(@javax.annotation.Nullable String diagnosticSummary) {
    this.diagnosticSummary = diagnosticSummary;
    return this;
  }

  /**
   * Diagnostic summary. Defaulted to \&quot;\&quot;
   * @return diagnosticSummary
   */
  @javax.annotation.Nullable
  public String getDiagnosticSummary() {
    return diagnosticSummary;
  }

  public void setDiagnosticSummary(@javax.annotation.Nullable String diagnosticSummary) {
    this.diagnosticSummary = diagnosticSummary;
  }


  public IndicatorQueryResp geneExist(@javax.annotation.Nullable Boolean geneExist) {
    this.geneExist = geneExist;
    return this;
  }

  /**
   * Indicates whether the gene is curated by OncoKB
   * @return geneExist
   */
  @javax.annotation.Nullable
  public Boolean getGeneExist() {
    return geneExist;
  }

  public void setGeneExist(@javax.annotation.Nullable Boolean geneExist) {
    this.geneExist = geneExist;
  }


  public IndicatorQueryResp geneSummary(@javax.annotation.Nullable String geneSummary) {
    this.geneSummary = geneSummary;
    return this;
  }

  /**
   * Gene summary. Defaulted to \&quot;\&quot;
   * @return geneSummary
   */
  @javax.annotation.Nullable
  public String getGeneSummary() {
    return geneSummary;
  }

  public void setGeneSummary(@javax.annotation.Nullable String geneSummary) {
    this.geneSummary = geneSummary;
  }


  public IndicatorQueryResp highestDiagnosticImplicationLevel(@javax.annotation.Nullable HighestDiagnosticImplicationLevelEnum highestDiagnosticImplicationLevel) {
    this.highestDiagnosticImplicationLevel = highestDiagnosticImplicationLevel;
    return this;
  }

  /**
   * (Nullable) The highest diagnostic level from a list of diagnostic evidences.
   * @return highestDiagnosticImplicationLevel
   */
  @javax.annotation.Nullable
  public HighestDiagnosticImplicationLevelEnum getHighestDiagnosticImplicationLevel() {
    return highestDiagnosticImplicationLevel;
  }

  public void setHighestDiagnosticImplicationLevel(@javax.annotation.Nullable HighestDiagnosticImplicationLevelEnum highestDiagnosticImplicationLevel) {
    this.highestDiagnosticImplicationLevel = highestDiagnosticImplicationLevel;
  }


  public IndicatorQueryResp highestFdaLevel(@javax.annotation.Nullable HighestFdaLevelEnum highestFdaLevel) {
    this.highestFdaLevel = highestFdaLevel;
    return this;
  }

  /**
   * (Nullable) The highest FDA level from a list of therapeutic evidences.
   * @return highestFdaLevel
   */
  @javax.annotation.Nullable
  public HighestFdaLevelEnum getHighestFdaLevel() {
    return highestFdaLevel;
  }

  public void setHighestFdaLevel(@javax.annotation.Nullable HighestFdaLevelEnum highestFdaLevel) {
    this.highestFdaLevel = highestFdaLevel;
  }


  public IndicatorQueryResp highestPrognosticImplicationLevel(@javax.annotation.Nullable HighestPrognosticImplicationLevelEnum highestPrognosticImplicationLevel) {
    this.highestPrognosticImplicationLevel = highestPrognosticImplicationLevel;
    return this;
  }

  /**
   * (Nullable) The highest prognostic level from a list of prognostic evidences.
   * @return highestPrognosticImplicationLevel
   */
  @javax.annotation.Nullable
  public HighestPrognosticImplicationLevelEnum getHighestPrognosticImplicationLevel() {
    return highestPrognosticImplicationLevel;
  }

  public void setHighestPrognosticImplicationLevel(@javax.annotation.Nullable HighestPrognosticImplicationLevelEnum highestPrognosticImplicationLevel) {
    this.highestPrognosticImplicationLevel = highestPrognosticImplicationLevel;
  }


  public IndicatorQueryResp highestResistanceLevel(@javax.annotation.Nullable HighestResistanceLevelEnum highestResistanceLevel) {
    this.highestResistanceLevel = highestResistanceLevel;
    return this;
  }

  /**
   * (Nullable) The highest resistance level from a list of therapeutic evidences.
   * @return highestResistanceLevel
   */
  @javax.annotation.Nullable
  public HighestResistanceLevelEnum getHighestResistanceLevel() {
    return highestResistanceLevel;
  }

  public void setHighestResistanceLevel(@javax.annotation.Nullable HighestResistanceLevelEnum highestResistanceLevel) {
    this.highestResistanceLevel = highestResistanceLevel;
  }


  public IndicatorQueryResp highestSensitiveLevel(@javax.annotation.Nullable HighestSensitiveLevelEnum highestSensitiveLevel) {
    this.highestSensitiveLevel = highestSensitiveLevel;
    return this;
  }

  /**
   * (Nullable) The highest sensitivity level from a list of therapeutic evidences.
   * @return highestSensitiveLevel
   */
  @javax.annotation.Nullable
  public HighestSensitiveLevelEnum getHighestSensitiveLevel() {
    return highestSensitiveLevel;
  }

  public void setHighestSensitiveLevel(@javax.annotation.Nullable HighestSensitiveLevelEnum highestSensitiveLevel) {
    this.highestSensitiveLevel = highestSensitiveLevel;
  }


  public IndicatorQueryResp hotspot(@javax.annotation.Nullable Boolean hotspot) {
    this.hotspot = hotspot;
    return this;
  }

  /**
   * Whether variant is recurrently found in cancer with statistical significance, as defined in Chang et al. (2017). See SOP Protocol 9.2
   * @return hotspot
   */
  @javax.annotation.Nullable
  public Boolean getHotspot() {
    return hotspot;
  }

  public void setHotspot(@javax.annotation.Nullable Boolean hotspot) {
    this.hotspot = hotspot;
  }


  public IndicatorQueryResp lastUpdate(@javax.annotation.Nullable String lastUpdate) {
    this.lastUpdate = lastUpdate;
    return this;
  }

  /**
   * OncoKB data release date. Formatted as MM/DD/YYYY
   * @return lastUpdate
   */
  @javax.annotation.Nullable
  public String getLastUpdate() {
    return lastUpdate;
  }

  public void setLastUpdate(@javax.annotation.Nullable String lastUpdate) {
    this.lastUpdate = lastUpdate;
  }


  public IndicatorQueryResp mutationEffect(@javax.annotation.Nullable MutationEffectResp mutationEffect) {
    this.mutationEffect = mutationEffect;
    return this;
  }

  /**
   * Get mutationEffect
   * @return mutationEffect
   */
  @javax.annotation.Nullable
  public MutationEffectResp getMutationEffect() {
    return mutationEffect;
  }

  public void setMutationEffect(@javax.annotation.Nullable MutationEffectResp mutationEffect) {
    this.mutationEffect = mutationEffect;
  }


  public IndicatorQueryResp oncogenic(@javax.annotation.Nullable OncogenicEnum oncogenic) {
    this.oncogenic = oncogenic;
    return this;
  }

  /**
   * The oncogenicity status of the variant. Defaulted to \&quot;Unknown\&quot;.
   * @return oncogenic
   */
  @javax.annotation.Nullable
  public OncogenicEnum getOncogenic() {
    return oncogenic;
  }

  public void setOncogenic(@javax.annotation.Nullable OncogenicEnum oncogenic) {
    this.oncogenic = oncogenic;
  }


  public IndicatorQueryResp otherSignificantResistanceLevels(@javax.annotation.Nullable List<OtherSignificantResistanceLevelsEnum> otherSignificantResistanceLevels) {
    this.otherSignificantResistanceLevels = otherSignificantResistanceLevels;
    return this;
  }

  public IndicatorQueryResp addOtherSignificantResistanceLevelsItem(OtherSignificantResistanceLevelsEnum otherSignificantResistanceLevelsItem) {
    if (this.otherSignificantResistanceLevels == null) {
      this.otherSignificantResistanceLevels = new ArrayList<>();
    }
    this.otherSignificantResistanceLevels.add(otherSignificantResistanceLevelsItem);
    return this;
  }

  /**
   * DEPRECATED
   * @return otherSignificantResistanceLevels
   */
  @javax.annotation.Nullable
  public List<OtherSignificantResistanceLevelsEnum> getOtherSignificantResistanceLevels() {
    return otherSignificantResistanceLevels;
  }

  public void setOtherSignificantResistanceLevels(@javax.annotation.Nullable List<OtherSignificantResistanceLevelsEnum> otherSignificantResistanceLevels) {
    this.otherSignificantResistanceLevels = otherSignificantResistanceLevels;
  }


  public IndicatorQueryResp otherSignificantSensitiveLevels(@javax.annotation.Nullable List<OtherSignificantSensitiveLevelsEnum> otherSignificantSensitiveLevels) {
    this.otherSignificantSensitiveLevels = otherSignificantSensitiveLevels;
    return this;
  }

  public IndicatorQueryResp addOtherSignificantSensitiveLevelsItem(OtherSignificantSensitiveLevelsEnum otherSignificantSensitiveLevelsItem) {
    if (this.otherSignificantSensitiveLevels == null) {
      this.otherSignificantSensitiveLevels = new ArrayList<>();
    }
    this.otherSignificantSensitiveLevels.add(otherSignificantSensitiveLevelsItem);
    return this;
  }

  /**
   * DEPRECATED
   * @return otherSignificantSensitiveLevels
   */
  @javax.annotation.Nullable
  public List<OtherSignificantSensitiveLevelsEnum> getOtherSignificantSensitiveLevels() {
    return otherSignificantSensitiveLevels;
  }

  public void setOtherSignificantSensitiveLevels(@javax.annotation.Nullable List<OtherSignificantSensitiveLevelsEnum> otherSignificantSensitiveLevels) {
    this.otherSignificantSensitiveLevels = otherSignificantSensitiveLevels;
  }


  public IndicatorQueryResp prognosticImplications(@javax.annotation.Nullable List<Implication> prognosticImplications) {
    this.prognosticImplications = prognosticImplications;
    return this;
  }

  public IndicatorQueryResp addPrognosticImplicationsItem(Implication prognosticImplicationsItem) {
    if (this.prognosticImplications == null) {
      this.prognosticImplications = new ArrayList<>();
    }
    this.prognosticImplications.add(prognosticImplicationsItem);
    return this;
  }

  /**
   * List of prognostic implications. Defaulted to empty list
   * @return prognosticImplications
   */
  @javax.annotation.Nullable
  public List<Implication> getPrognosticImplications() {
    return prognosticImplications;
  }

  public void setPrognosticImplications(@javax.annotation.Nullable List<Implication> prognosticImplications) {
    this.prognosticImplications = prognosticImplications;
  }


  public IndicatorQueryResp prognosticSummary(@javax.annotation.Nullable String prognosticSummary) {
    this.prognosticSummary = prognosticSummary;
    return this;
  }

  /**
   * Prognostic summary. Defaulted to \&quot;\&quot;
   * @return prognosticSummary
   */
  @javax.annotation.Nullable
  public String getPrognosticSummary() {
    return prognosticSummary;
  }

  public void setPrognosticSummary(@javax.annotation.Nullable String prognosticSummary) {
    this.prognosticSummary = prognosticSummary;
  }


  public IndicatorQueryResp query(@javax.annotation.Nullable Query query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nullable
  public Query getQuery() {
    return query;
  }

  public void setQuery(@javax.annotation.Nullable Query query) {
    this.query = query;
  }


  public IndicatorQueryResp treatments(@javax.annotation.Nullable List<IndicatorQueryTreatment> treatments) {
    this.treatments = treatments;
    return this;
  }

  public IndicatorQueryResp addTreatmentsItem(IndicatorQueryTreatment treatmentsItem) {
    if (this.treatments == null) {
      this.treatments = new ArrayList<>();
    }
    this.treatments.add(treatmentsItem);
    return this;
  }

  /**
   * List of therapeutic implications implications. Defaulted to empty list
   * @return treatments
   */
  @javax.annotation.Nullable
  public List<IndicatorQueryTreatment> getTreatments() {
    return treatments;
  }

  public void setTreatments(@javax.annotation.Nullable List<IndicatorQueryTreatment> treatments) {
    this.treatments = treatments;
  }


  public IndicatorQueryResp tumorTypeSummary(@javax.annotation.Nullable String tumorTypeSummary) {
    this.tumorTypeSummary = tumorTypeSummary;
    return this;
  }

  /**
   * Tumor type summary. Defaulted to \&quot;\&quot;
   * @return tumorTypeSummary
   */
  @javax.annotation.Nullable
  public String getTumorTypeSummary() {
    return tumorTypeSummary;
  }

  public void setTumorTypeSummary(@javax.annotation.Nullable String tumorTypeSummary) {
    this.tumorTypeSummary = tumorTypeSummary;
  }


  public IndicatorQueryResp variantExist(@javax.annotation.Nullable Boolean variantExist) {
    this.variantExist = variantExist;
    return this;
  }

  /**
   * Indicates whether an exact match for the queried variant is curated
   * @return variantExist
   */
  @javax.annotation.Nullable
  public Boolean getVariantExist() {
    return variantExist;
  }

  public void setVariantExist(@javax.annotation.Nullable Boolean variantExist) {
    this.variantExist = variantExist;
  }


  public IndicatorQueryResp variantSummary(@javax.annotation.Nullable String variantSummary) {
    this.variantSummary = variantSummary;
    return this;
  }

  /**
   * Variant summary. Defaulted to \&quot;\&quot;
   * @return variantSummary
   */
  @javax.annotation.Nullable
  public String getVariantSummary() {
    return variantSummary;
  }

  public void setVariantSummary(@javax.annotation.Nullable String variantSummary) {
    this.variantSummary = variantSummary;
  }


  public IndicatorQueryResp vus(@javax.annotation.Nullable Boolean vus) {
    this.vus = vus;
    return this;
  }

  /**
   * Get vus
   * @return vus
   */
  @javax.annotation.Nullable
  public Boolean getVus() {
    return vus;
  }

  public void setVus(@javax.annotation.Nullable Boolean vus) {
    this.vus = vus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndicatorQueryResp indicatorQueryResp = (IndicatorQueryResp) o;
    return Objects.equals(this.alleleExist, indicatorQueryResp.alleleExist) &&
        Objects.equals(this.dataVersion, indicatorQueryResp.dataVersion) &&
        Objects.equals(this.diagnosticImplications, indicatorQueryResp.diagnosticImplications) &&
        Objects.equals(this.diagnosticSummary, indicatorQueryResp.diagnosticSummary) &&
        Objects.equals(this.geneExist, indicatorQueryResp.geneExist) &&
        Objects.equals(this.geneSummary, indicatorQueryResp.geneSummary) &&
        Objects.equals(this.highestDiagnosticImplicationLevel, indicatorQueryResp.highestDiagnosticImplicationLevel) &&
        Objects.equals(this.highestFdaLevel, indicatorQueryResp.highestFdaLevel) &&
        Objects.equals(this.highestPrognosticImplicationLevel, indicatorQueryResp.highestPrognosticImplicationLevel) &&
        Objects.equals(this.highestResistanceLevel, indicatorQueryResp.highestResistanceLevel) &&
        Objects.equals(this.highestSensitiveLevel, indicatorQueryResp.highestSensitiveLevel) &&
        Objects.equals(this.hotspot, indicatorQueryResp.hotspot) &&
        Objects.equals(this.lastUpdate, indicatorQueryResp.lastUpdate) &&
        Objects.equals(this.mutationEffect, indicatorQueryResp.mutationEffect) &&
        Objects.equals(this.oncogenic, indicatorQueryResp.oncogenic) &&
        Objects.equals(this.otherSignificantResistanceLevels, indicatorQueryResp.otherSignificantResistanceLevels) &&
        Objects.equals(this.otherSignificantSensitiveLevels, indicatorQueryResp.otherSignificantSensitiveLevels) &&
        Objects.equals(this.prognosticImplications, indicatorQueryResp.prognosticImplications) &&
        Objects.equals(this.prognosticSummary, indicatorQueryResp.prognosticSummary) &&
        Objects.equals(this.query, indicatorQueryResp.query) &&
        Objects.equals(this.treatments, indicatorQueryResp.treatments) &&
        Objects.equals(this.tumorTypeSummary, indicatorQueryResp.tumorTypeSummary) &&
        Objects.equals(this.variantExist, indicatorQueryResp.variantExist) &&
        Objects.equals(this.variantSummary, indicatorQueryResp.variantSummary) &&
        Objects.equals(this.vus, indicatorQueryResp.vus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alleleExist, dataVersion, diagnosticImplications, diagnosticSummary, geneExist, geneSummary, highestDiagnosticImplicationLevel, highestFdaLevel, highestPrognosticImplicationLevel, highestResistanceLevel, highestSensitiveLevel, hotspot, lastUpdate, mutationEffect, oncogenic, otherSignificantResistanceLevels, otherSignificantSensitiveLevels, prognosticImplications, prognosticSummary, query, treatments, tumorTypeSummary, variantExist, variantSummary, vus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndicatorQueryResp {\n");
    sb.append("    alleleExist: ").append(toIndentedString(alleleExist)).append("\n");
    sb.append("    dataVersion: ").append(toIndentedString(dataVersion)).append("\n");
    sb.append("    diagnosticImplications: ").append(toIndentedString(diagnosticImplications)).append("\n");
    sb.append("    diagnosticSummary: ").append(toIndentedString(diagnosticSummary)).append("\n");
    sb.append("    geneExist: ").append(toIndentedString(geneExist)).append("\n");
    sb.append("    geneSummary: ").append(toIndentedString(geneSummary)).append("\n");
    sb.append("    highestDiagnosticImplicationLevel: ").append(toIndentedString(highestDiagnosticImplicationLevel)).append("\n");
    sb.append("    highestFdaLevel: ").append(toIndentedString(highestFdaLevel)).append("\n");
    sb.append("    highestPrognosticImplicationLevel: ").append(toIndentedString(highestPrognosticImplicationLevel)).append("\n");
    sb.append("    highestResistanceLevel: ").append(toIndentedString(highestResistanceLevel)).append("\n");
    sb.append("    highestSensitiveLevel: ").append(toIndentedString(highestSensitiveLevel)).append("\n");
    sb.append("    hotspot: ").append(toIndentedString(hotspot)).append("\n");
    sb.append("    lastUpdate: ").append(toIndentedString(lastUpdate)).append("\n");
    sb.append("    mutationEffect: ").append(toIndentedString(mutationEffect)).append("\n");
    sb.append("    oncogenic: ").append(toIndentedString(oncogenic)).append("\n");
    sb.append("    otherSignificantResistanceLevels: ").append(toIndentedString(otherSignificantResistanceLevels)).append("\n");
    sb.append("    otherSignificantSensitiveLevels: ").append(toIndentedString(otherSignificantSensitiveLevels)).append("\n");
    sb.append("    prognosticImplications: ").append(toIndentedString(prognosticImplications)).append("\n");
    sb.append("    prognosticSummary: ").append(toIndentedString(prognosticSummary)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    treatments: ").append(toIndentedString(treatments)).append("\n");
    sb.append("    tumorTypeSummary: ").append(toIndentedString(tumorTypeSummary)).append("\n");
    sb.append("    variantExist: ").append(toIndentedString(variantExist)).append("\n");
    sb.append("    variantSummary: ").append(toIndentedString(variantSummary)).append("\n");
    sb.append("    vus: ").append(toIndentedString(vus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alleleExist");
    openapiFields.add("dataVersion");
    openapiFields.add("diagnosticImplications");
    openapiFields.add("diagnosticSummary");
    openapiFields.add("geneExist");
    openapiFields.add("geneSummary");
    openapiFields.add("highestDiagnosticImplicationLevel");
    openapiFields.add("highestFdaLevel");
    openapiFields.add("highestPrognosticImplicationLevel");
    openapiFields.add("highestResistanceLevel");
    openapiFields.add("highestSensitiveLevel");
    openapiFields.add("hotspot");
    openapiFields.add("lastUpdate");
    openapiFields.add("mutationEffect");
    openapiFields.add("oncogenic");
    openapiFields.add("otherSignificantResistanceLevels");
    openapiFields.add("otherSignificantSensitiveLevels");
    openapiFields.add("prognosticImplications");
    openapiFields.add("prognosticSummary");
    openapiFields.add("query");
    openapiFields.add("treatments");
    openapiFields.add("tumorTypeSummary");
    openapiFields.add("variantExist");
    openapiFields.add("variantSummary");
    openapiFields.add("vus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IndicatorQueryResp
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IndicatorQueryResp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IndicatorQueryResp is not found in the empty JSON string", IndicatorQueryResp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IndicatorQueryResp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IndicatorQueryResp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataVersion") != null && !jsonObj.get("dataVersion").isJsonNull()) && !jsonObj.get("dataVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataVersion").toString()));
      }
      if (jsonObj.get("diagnosticImplications") != null && !jsonObj.get("diagnosticImplications").isJsonNull()) {
        JsonArray jsonArraydiagnosticImplications = jsonObj.getAsJsonArray("diagnosticImplications");
        if (jsonArraydiagnosticImplications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("diagnosticImplications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `diagnosticImplications` to be an array in the JSON string but got `%s`", jsonObj.get("diagnosticImplications").toString()));
          }

          // validate the optional field `diagnosticImplications` (array)
          for (int i = 0; i < jsonArraydiagnosticImplications.size(); i++) {
            Implication.validateJsonElement(jsonArraydiagnosticImplications.get(i));
          };
        }
      }
      if ((jsonObj.get("diagnosticSummary") != null && !jsonObj.get("diagnosticSummary").isJsonNull()) && !jsonObj.get("diagnosticSummary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diagnosticSummary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diagnosticSummary").toString()));
      }
      if ((jsonObj.get("geneSummary") != null && !jsonObj.get("geneSummary").isJsonNull()) && !jsonObj.get("geneSummary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `geneSummary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("geneSummary").toString()));
      }
      if ((jsonObj.get("highestDiagnosticImplicationLevel") != null && !jsonObj.get("highestDiagnosticImplicationLevel").isJsonNull()) && !jsonObj.get("highestDiagnosticImplicationLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highestDiagnosticImplicationLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highestDiagnosticImplicationLevel").toString()));
      }
      // validate the optional field `highestDiagnosticImplicationLevel`
      if (jsonObj.get("highestDiagnosticImplicationLevel") != null && !jsonObj.get("highestDiagnosticImplicationLevel").isJsonNull()) {
        HighestDiagnosticImplicationLevelEnum.validateJsonElement(jsonObj.get("highestDiagnosticImplicationLevel"));
      }
      if ((jsonObj.get("highestFdaLevel") != null && !jsonObj.get("highestFdaLevel").isJsonNull()) && !jsonObj.get("highestFdaLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highestFdaLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highestFdaLevel").toString()));
      }
      // validate the optional field `highestFdaLevel`
      if (jsonObj.get("highestFdaLevel") != null && !jsonObj.get("highestFdaLevel").isJsonNull()) {
        HighestFdaLevelEnum.validateJsonElement(jsonObj.get("highestFdaLevel"));
      }
      if ((jsonObj.get("highestPrognosticImplicationLevel") != null && !jsonObj.get("highestPrognosticImplicationLevel").isJsonNull()) && !jsonObj.get("highestPrognosticImplicationLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highestPrognosticImplicationLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highestPrognosticImplicationLevel").toString()));
      }
      // validate the optional field `highestPrognosticImplicationLevel`
      if (jsonObj.get("highestPrognosticImplicationLevel") != null && !jsonObj.get("highestPrognosticImplicationLevel").isJsonNull()) {
        HighestPrognosticImplicationLevelEnum.validateJsonElement(jsonObj.get("highestPrognosticImplicationLevel"));
      }
      if ((jsonObj.get("highestResistanceLevel") != null && !jsonObj.get("highestResistanceLevel").isJsonNull()) && !jsonObj.get("highestResistanceLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highestResistanceLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highestResistanceLevel").toString()));
      }
      // validate the optional field `highestResistanceLevel`
      if (jsonObj.get("highestResistanceLevel") != null && !jsonObj.get("highestResistanceLevel").isJsonNull()) {
        HighestResistanceLevelEnum.validateJsonElement(jsonObj.get("highestResistanceLevel"));
      }
      if ((jsonObj.get("highestSensitiveLevel") != null && !jsonObj.get("highestSensitiveLevel").isJsonNull()) && !jsonObj.get("highestSensitiveLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highestSensitiveLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highestSensitiveLevel").toString()));
      }
      // validate the optional field `highestSensitiveLevel`
      if (jsonObj.get("highestSensitiveLevel") != null && !jsonObj.get("highestSensitiveLevel").isJsonNull()) {
        HighestSensitiveLevelEnum.validateJsonElement(jsonObj.get("highestSensitiveLevel"));
      }
      if ((jsonObj.get("lastUpdate") != null && !jsonObj.get("lastUpdate").isJsonNull()) && !jsonObj.get("lastUpdate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdate").toString()));
      }
      // validate the optional field `mutationEffect`
      if (jsonObj.get("mutationEffect") != null && !jsonObj.get("mutationEffect").isJsonNull()) {
        MutationEffectResp.validateJsonElement(jsonObj.get("mutationEffect"));
      }
      if ((jsonObj.get("oncogenic") != null && !jsonObj.get("oncogenic").isJsonNull()) && !jsonObj.get("oncogenic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oncogenic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oncogenic").toString()));
      }
      // validate the optional field `oncogenic`
      if (jsonObj.get("oncogenic") != null && !jsonObj.get("oncogenic").isJsonNull()) {
        OncogenicEnum.validateJsonElement(jsonObj.get("oncogenic"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("otherSignificantResistanceLevels") != null && !jsonObj.get("otherSignificantResistanceLevels").isJsonNull() && !jsonObj.get("otherSignificantResistanceLevels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `otherSignificantResistanceLevels` to be an array in the JSON string but got `%s`", jsonObj.get("otherSignificantResistanceLevels").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("otherSignificantSensitiveLevels") != null && !jsonObj.get("otherSignificantSensitiveLevels").isJsonNull() && !jsonObj.get("otherSignificantSensitiveLevels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `otherSignificantSensitiveLevels` to be an array in the JSON string but got `%s`", jsonObj.get("otherSignificantSensitiveLevels").toString()));
      }
      if (jsonObj.get("prognosticImplications") != null && !jsonObj.get("prognosticImplications").isJsonNull()) {
        JsonArray jsonArrayprognosticImplications = jsonObj.getAsJsonArray("prognosticImplications");
        if (jsonArrayprognosticImplications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("prognosticImplications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `prognosticImplications` to be an array in the JSON string but got `%s`", jsonObj.get("prognosticImplications").toString()));
          }

          // validate the optional field `prognosticImplications` (array)
          for (int i = 0; i < jsonArrayprognosticImplications.size(); i++) {
            Implication.validateJsonElement(jsonArrayprognosticImplications.get(i));
          };
        }
      }
      if ((jsonObj.get("prognosticSummary") != null && !jsonObj.get("prognosticSummary").isJsonNull()) && !jsonObj.get("prognosticSummary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prognosticSummary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prognosticSummary").toString()));
      }
      // validate the optional field `query`
      if (jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) {
        Query.validateJsonElement(jsonObj.get("query"));
      }
      if (jsonObj.get("treatments") != null && !jsonObj.get("treatments").isJsonNull()) {
        JsonArray jsonArraytreatments = jsonObj.getAsJsonArray("treatments");
        if (jsonArraytreatments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("treatments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `treatments` to be an array in the JSON string but got `%s`", jsonObj.get("treatments").toString()));
          }

          // validate the optional field `treatments` (array)
          for (int i = 0; i < jsonArraytreatments.size(); i++) {
            IndicatorQueryTreatment.validateJsonElement(jsonArraytreatments.get(i));
          };
        }
      }
      if ((jsonObj.get("tumorTypeSummary") != null && !jsonObj.get("tumorTypeSummary").isJsonNull()) && !jsonObj.get("tumorTypeSummary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tumorTypeSummary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tumorTypeSummary").toString()));
      }
      if ((jsonObj.get("variantSummary") != null && !jsonObj.get("variantSummary").isJsonNull()) && !jsonObj.get("variantSummary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variantSummary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variantSummary").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IndicatorQueryResp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IndicatorQueryResp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IndicatorQueryResp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IndicatorQueryResp.class));

       return (TypeAdapter<T>) new TypeAdapter<IndicatorQueryResp>() {
           @Override
           public void write(JsonWriter out, IndicatorQueryResp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IndicatorQueryResp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IndicatorQueryResp given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IndicatorQueryResp
   * @throws IOException if the JSON string is invalid with respect to IndicatorQueryResp
   */
  public static IndicatorQueryResp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IndicatorQueryResp.class);
  }

  /**
   * Convert an instance of IndicatorQueryResp to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

