/*
 * OncoKB APIs
 * OncoKB, a comprehensive and curated precision oncology knowledge base, offers oncologists detailed, evidence-based information about individual somatic mutations and structural alterations present in patient tumors with the goal of supporting optimal treatment decisions.
 *
 * The version of the OpenAPI document: v1.5.0
 * Contact: contact@oncokb.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InfoLevel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T16:00:42.192711-05:00[America/New_York]", comments = "Generator version: 7.11.0")
public class InfoLevel {
  public static final String SERIALIZED_NAME_COLOR_HEX = "colorHex";
  @SerializedName(SERIALIZED_NAME_COLOR_HEX)
  @javax.annotation.Nullable
  private String colorHex;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_HTML_DESCRIPTION = "htmlDescription";
  @SerializedName(SERIALIZED_NAME_HTML_DESCRIPTION)
  @javax.annotation.Nullable
  private String htmlDescription;

  /**
   * Gets or Sets levelOfEvidence
   */
  @JsonAdapter(LevelOfEvidenceEnum.Adapter.class)
  public enum LevelOfEvidenceEnum {
    LEVEL_1("LEVEL_1"),
    
    LEVEL_2("LEVEL_2"),
    
    LEVEL_3_A("LEVEL_3A"),
    
    LEVEL_3_B("LEVEL_3B"),
    
    LEVEL_4("LEVEL_4"),
    
    LEVEL_R1("LEVEL_R1"),
    
    LEVEL_R2("LEVEL_R2"),
    
    LEVEL_PX1("LEVEL_Px1"),
    
    LEVEL_PX2("LEVEL_Px2"),
    
    LEVEL_PX3("LEVEL_Px3"),
    
    LEVEL_DX1("LEVEL_Dx1"),
    
    LEVEL_DX2("LEVEL_Dx2"),
    
    LEVEL_DX3("LEVEL_Dx3"),
    
    LEVEL_FDA1("LEVEL_Fda1"),
    
    LEVEL_FDA2("LEVEL_Fda2"),
    
    LEVEL_FDA3("LEVEL_Fda3"),
    
    NO("NO");

    private String value;

    LevelOfEvidenceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LevelOfEvidenceEnum fromValue(String value) {
      for (LevelOfEvidenceEnum b : LevelOfEvidenceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LevelOfEvidenceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LevelOfEvidenceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LevelOfEvidenceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LevelOfEvidenceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LevelOfEvidenceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEVEL_OF_EVIDENCE = "levelOfEvidence";
  @SerializedName(SERIALIZED_NAME_LEVEL_OF_EVIDENCE)
  @javax.annotation.Nullable
  private LevelOfEvidenceEnum levelOfEvidence;

  public InfoLevel() {
  }

  public InfoLevel colorHex(@javax.annotation.Nullable String colorHex) {
    this.colorHex = colorHex;
    return this;
  }

  /**
   * Get colorHex
   * @return colorHex
   */
  @javax.annotation.Nullable
  public String getColorHex() {
    return colorHex;
  }

  public void setColorHex(@javax.annotation.Nullable String colorHex) {
    this.colorHex = colorHex;
  }


  public InfoLevel description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public InfoLevel htmlDescription(@javax.annotation.Nullable String htmlDescription) {
    this.htmlDescription = htmlDescription;
    return this;
  }

  /**
   * Get htmlDescription
   * @return htmlDescription
   */
  @javax.annotation.Nullable
  public String getHtmlDescription() {
    return htmlDescription;
  }

  public void setHtmlDescription(@javax.annotation.Nullable String htmlDescription) {
    this.htmlDescription = htmlDescription;
  }


  public InfoLevel levelOfEvidence(@javax.annotation.Nullable LevelOfEvidenceEnum levelOfEvidence) {
    this.levelOfEvidence = levelOfEvidence;
    return this;
  }

  /**
   * Get levelOfEvidence
   * @return levelOfEvidence
   */
  @javax.annotation.Nullable
  public LevelOfEvidenceEnum getLevelOfEvidence() {
    return levelOfEvidence;
  }

  public void setLevelOfEvidence(@javax.annotation.Nullable LevelOfEvidenceEnum levelOfEvidence) {
    this.levelOfEvidence = levelOfEvidence;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InfoLevel infoLevel = (InfoLevel) o;
    return Objects.equals(this.colorHex, infoLevel.colorHex) &&
        Objects.equals(this.description, infoLevel.description) &&
        Objects.equals(this.htmlDescription, infoLevel.htmlDescription) &&
        Objects.equals(this.levelOfEvidence, infoLevel.levelOfEvidence);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorHex, description, htmlDescription, levelOfEvidence);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InfoLevel {\n");
    sb.append("    colorHex: ").append(toIndentedString(colorHex)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    htmlDescription: ").append(toIndentedString(htmlDescription)).append("\n");
    sb.append("    levelOfEvidence: ").append(toIndentedString(levelOfEvidence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colorHex");
    openapiFields.add("description");
    openapiFields.add("htmlDescription");
    openapiFields.add("levelOfEvidence");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InfoLevel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InfoLevel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InfoLevel is not found in the empty JSON string", InfoLevel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InfoLevel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InfoLevel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("colorHex") != null && !jsonObj.get("colorHex").isJsonNull()) && !jsonObj.get("colorHex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colorHex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colorHex").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("htmlDescription") != null && !jsonObj.get("htmlDescription").isJsonNull()) && !jsonObj.get("htmlDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `htmlDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("htmlDescription").toString()));
      }
      if ((jsonObj.get("levelOfEvidence") != null && !jsonObj.get("levelOfEvidence").isJsonNull()) && !jsonObj.get("levelOfEvidence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `levelOfEvidence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("levelOfEvidence").toString()));
      }
      // validate the optional field `levelOfEvidence`
      if (jsonObj.get("levelOfEvidence") != null && !jsonObj.get("levelOfEvidence").isJsonNull()) {
        LevelOfEvidenceEnum.validateJsonElement(jsonObj.get("levelOfEvidence"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InfoLevel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InfoLevel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InfoLevel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InfoLevel.class));

       return (TypeAdapter<T>) new TypeAdapter<InfoLevel>() {
           @Override
           public void write(JsonWriter out, InfoLevel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InfoLevel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InfoLevel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InfoLevel
   * @throws IOException if the JSON string is invalid with respect to InfoLevel
   */
  public static InfoLevel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InfoLevel.class);
  }

  /**
   * Convert an instance of InfoLevel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

