/*
 * OncoKB APIs
 * OncoKB, a comprehensive and curated precision oncology knowledge base, offers oncologists detailed, evidence-based information about individual somatic mutations and structural alterations present in patient tumors with the goal of supporting optimal treatment decisions.
 *
 * The version of the OpenAPI document: v1.5.0
 * Contact: contact@oncokb.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.MainType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OncoTree Detailed Cancer Type. See https://oncotree.mskcc.org/?version&#x3D;oncotree_2019_12_01
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T16:13:52.565252-05:00[America/New_York]", comments = "Generator version: 7.11.0")
public class TumorType {
  public static final String SERIALIZED_NAME_CHILDREN = "children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  @javax.annotation.Nullable
  private Map<String, TumorType> children = new HashMap<>();

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  @javax.annotation.Nullable
  private String code;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  @javax.annotation.Nullable
  private String color;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private Integer id;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  @javax.annotation.Nullable
  private Integer level;

  public static final String SERIALIZED_NAME_MAIN_TYPE = "mainType";
  @SerializedName(SERIALIZED_NAME_MAIN_TYPE)
  @javax.annotation.Nullable
  private MainType mainType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  @javax.annotation.Nullable
  private String parent;

  public static final String SERIALIZED_NAME_TISSUE = "tissue";
  @SerializedName(SERIALIZED_NAME_TISSUE)
  @javax.annotation.Nullable
  private String tissue;

  /**
   * Tumor form
   */
  @JsonAdapter(TumorFormEnum.Adapter.class)
  public enum TumorFormEnum {
    SOLID("SOLID"),
    
    LIQUID("LIQUID"),
    
    MIXED("MIXED");

    private String value;

    TumorFormEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TumorFormEnum fromValue(String value) {
      for (TumorFormEnum b : TumorFormEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TumorFormEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TumorFormEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TumorFormEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TumorFormEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TumorFormEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TUMOR_FORM = "tumorForm";
  @SerializedName(SERIALIZED_NAME_TUMOR_FORM)
  @javax.annotation.Nullable
  private TumorFormEnum tumorForm;

  public TumorType() {
  }

  public TumorType children(@javax.annotation.Nullable Map<String, TumorType> children) {
    this.children = children;
    return this;
  }

  public TumorType putChildrenItem(String key, TumorType childrenItem) {
    if (this.children == null) {
      this.children = new HashMap<>();
    }
    this.children.put(key, childrenItem);
    return this;
  }

  /**
   * Map from parent tumor type to children tumor types
   * @return children
   */
  @javax.annotation.Nullable
  public Map<String, TumorType> getChildren() {
    return children;
  }

  public void setChildren(@javax.annotation.Nullable Map<String, TumorType> children) {
    this.children = children;
  }


  public TumorType code(@javax.annotation.Nullable String code) {
    this.code = code;
    return this;
  }

  /**
   * Oncotree code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(@javax.annotation.Nullable String code) {
    this.code = code;
  }


  public TumorType color(@javax.annotation.Nullable String color) {
    this.color = color;
    return this;
  }

  /**
   * (Nullable) Color of tumor
   * @return color
   */
  @javax.annotation.Nullable
  public String getColor() {
    return color;
  }

  public void setColor(@javax.annotation.Nullable String color) {
    this.color = color;
  }


  public TumorType id(@javax.annotation.Nullable Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Database TumorType ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable Integer id) {
    this.id = id;
  }


  public TumorType level(@javax.annotation.Nullable Integer level) {
    this.level = level;
    return this;
  }

  /**
   * Oncotree tumor type level. -1 indicates special tumor types (See SpecialTumorTypes.java)
   * @return level
   */
  @javax.annotation.Nullable
  public Integer getLevel() {
    return level;
  }

  public void setLevel(@javax.annotation.Nullable Integer level) {
    this.level = level;
  }


  public TumorType mainType(@javax.annotation.Nullable MainType mainType) {
    this.mainType = mainType;
    return this;
  }

  /**
   * Get mainType
   * @return mainType
   */
  @javax.annotation.Nullable
  public MainType getMainType() {
    return mainType;
  }

  public void setMainType(@javax.annotation.Nullable MainType mainType) {
    this.mainType = mainType;
  }


  public TumorType name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * (Nullable) Oncotree sub type
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public TumorType parent(@javax.annotation.Nullable String parent) {
    this.parent = parent;
    return this;
  }

  /**
   * (Nullable) Parent tumor name
   * @return parent
   */
  @javax.annotation.Nullable
  public String getParent() {
    return parent;
  }

  public void setParent(@javax.annotation.Nullable String parent) {
    this.parent = parent;
  }


  public TumorType tissue(@javax.annotation.Nullable String tissue) {
    this.tissue = tissue;
    return this;
  }

  /**
   * (Nullable) Oncotree tumor tissue
   * @return tissue
   */
  @javax.annotation.Nullable
  public String getTissue() {
    return tissue;
  }

  public void setTissue(@javax.annotation.Nullable String tissue) {
    this.tissue = tissue;
  }


  public TumorType tumorForm(@javax.annotation.Nullable TumorFormEnum tumorForm) {
    this.tumorForm = tumorForm;
    return this;
  }

  /**
   * Tumor form
   * @return tumorForm
   */
  @javax.annotation.Nullable
  public TumorFormEnum getTumorForm() {
    return tumorForm;
  }

  public void setTumorForm(@javax.annotation.Nullable TumorFormEnum tumorForm) {
    this.tumorForm = tumorForm;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TumorType tumorType = (TumorType) o;
    return Objects.equals(this.children, tumorType.children) &&
        Objects.equals(this.code, tumorType.code) &&
        Objects.equals(this.color, tumorType.color) &&
        Objects.equals(this.id, tumorType.id) &&
        Objects.equals(this.level, tumorType.level) &&
        Objects.equals(this.mainType, tumorType.mainType) &&
        Objects.equals(this.name, tumorType.name) &&
        Objects.equals(this.parent, tumorType.parent) &&
        Objects.equals(this.tissue, tumorType.tissue) &&
        Objects.equals(this.tumorForm, tumorType.tumorForm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(children, code, color, id, level, mainType, name, parent, tissue, tumorForm);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TumorType {\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    mainType: ").append(toIndentedString(mainType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    tissue: ").append(toIndentedString(tissue)).append("\n");
    sb.append("    tumorForm: ").append(toIndentedString(tumorForm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("children");
    openapiFields.add("code");
    openapiFields.add("color");
    openapiFields.add("id");
    openapiFields.add("level");
    openapiFields.add("mainType");
    openapiFields.add("name");
    openapiFields.add("parent");
    openapiFields.add("tissue");
    openapiFields.add("tumorForm");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TumorType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TumorType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TumorType is not found in the empty JSON string", TumorType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TumorType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TumorType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      // validate the optional field `mainType`
      if (jsonObj.get("mainType") != null && !jsonObj.get("mainType").isJsonNull()) {
        MainType.validateJsonElement(jsonObj.get("mainType"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) && !jsonObj.get("parent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent").toString()));
      }
      if ((jsonObj.get("tissue") != null && !jsonObj.get("tissue").isJsonNull()) && !jsonObj.get("tissue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tissue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tissue").toString()));
      }
      if ((jsonObj.get("tumorForm") != null && !jsonObj.get("tumorForm").isJsonNull()) && !jsonObj.get("tumorForm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tumorForm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tumorForm").toString()));
      }
      // validate the optional field `tumorForm`
      if (jsonObj.get("tumorForm") != null && !jsonObj.get("tumorForm").isJsonNull()) {
        TumorFormEnum.validateJsonElement(jsonObj.get("tumorForm"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TumorType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TumorType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TumorType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TumorType.class));

       return (TypeAdapter<T>) new TypeAdapter<TumorType>() {
           @Override
           public void write(JsonWriter out, TumorType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TumorType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TumorType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TumorType
   * @throws IOException if the JSON string is invalid with respect to TumorType
   */
  public static TumorType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TumorType.class);
  }

  /**
   * Convert an instance of TumorType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

