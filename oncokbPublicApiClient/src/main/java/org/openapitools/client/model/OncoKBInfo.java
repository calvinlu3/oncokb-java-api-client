/*
 * OncoKB APIs
 * OncoKB, a comprehensive and curated precision oncology knowledge base, offers oncologists detailed, evidence-based information about individual somatic mutations and structural alterations present in patient tumors with the goal of supporting optimal treatment decisions.
 *
 * The version of the OpenAPI document: v1.5.0
 * Contact: contact@oncokb.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InfoLevel;
import org.openapitools.client.model.SemVer;
import org.openapitools.client.model.Version;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OncoKBInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T16:13:52.565252-05:00[America/New_York]", comments = "Generator version: 7.11.0")
public class OncoKBInfo {
  public static final String SERIALIZED_NAME_API_VERSION = "apiVersion";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  @javax.annotation.Nullable
  private SemVer apiVersion;

  public static final String SERIALIZED_NAME_APP_VERSION = "appVersion";
  @SerializedName(SERIALIZED_NAME_APP_VERSION)
  @javax.annotation.Nullable
  private SemVer appVersion;

  public static final String SERIALIZED_NAME_DATA_VERSION = "dataVersion";
  @SerializedName(SERIALIZED_NAME_DATA_VERSION)
  @javax.annotation.Nullable
  private Version dataVersion;

  public static final String SERIALIZED_NAME_LEVELS = "levels";
  @SerializedName(SERIALIZED_NAME_LEVELS)
  @javax.annotation.Nullable
  private List<InfoLevel> levels = new ArrayList<>();

  public static final String SERIALIZED_NAME_NCIT_VERSION = "ncitVersion";
  @SerializedName(SERIALIZED_NAME_NCIT_VERSION)
  @javax.annotation.Nullable
  private String ncitVersion;

  public static final String SERIALIZED_NAME_ONCO_TREE_VERSION = "oncoTreeVersion";
  @SerializedName(SERIALIZED_NAME_ONCO_TREE_VERSION)
  @javax.annotation.Nullable
  private String oncoTreeVersion;

  public static final String SERIALIZED_NAME_PUBLIC_INSTANCE = "publicInstance";
  @SerializedName(SERIALIZED_NAME_PUBLIC_INSTANCE)
  @javax.annotation.Nullable
  private Boolean publicInstance;

  public OncoKBInfo() {
  }

  public OncoKBInfo apiVersion(@javax.annotation.Nullable SemVer apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

  /**
   * Get apiVersion
   * @return apiVersion
   */
  @javax.annotation.Nullable
  public SemVer getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(@javax.annotation.Nullable SemVer apiVersion) {
    this.apiVersion = apiVersion;
  }


  public OncoKBInfo appVersion(@javax.annotation.Nullable SemVer appVersion) {
    this.appVersion = appVersion;
    return this;
  }

  /**
   * Get appVersion
   * @return appVersion
   */
  @javax.annotation.Nullable
  public SemVer getAppVersion() {
    return appVersion;
  }

  public void setAppVersion(@javax.annotation.Nullable SemVer appVersion) {
    this.appVersion = appVersion;
  }


  public OncoKBInfo dataVersion(@javax.annotation.Nullable Version dataVersion) {
    this.dataVersion = dataVersion;
    return this;
  }

  /**
   * Get dataVersion
   * @return dataVersion
   */
  @javax.annotation.Nullable
  public Version getDataVersion() {
    return dataVersion;
  }

  public void setDataVersion(@javax.annotation.Nullable Version dataVersion) {
    this.dataVersion = dataVersion;
  }


  public OncoKBInfo levels(@javax.annotation.Nullable List<InfoLevel> levels) {
    this.levels = levels;
    return this;
  }

  public OncoKBInfo addLevelsItem(InfoLevel levelsItem) {
    if (this.levels == null) {
      this.levels = new ArrayList<>();
    }
    this.levels.add(levelsItem);
    return this;
  }

  /**
   * Get levels
   * @return levels
   */
  @javax.annotation.Nullable
  public List<InfoLevel> getLevels() {
    return levels;
  }

  public void setLevels(@javax.annotation.Nullable List<InfoLevel> levels) {
    this.levels = levels;
  }


  public OncoKBInfo ncitVersion(@javax.annotation.Nullable String ncitVersion) {
    this.ncitVersion = ncitVersion;
    return this;
  }

  /**
   * Get ncitVersion
   * @return ncitVersion
   */
  @javax.annotation.Nullable
  public String getNcitVersion() {
    return ncitVersion;
  }

  public void setNcitVersion(@javax.annotation.Nullable String ncitVersion) {
    this.ncitVersion = ncitVersion;
  }


  public OncoKBInfo oncoTreeVersion(@javax.annotation.Nullable String oncoTreeVersion) {
    this.oncoTreeVersion = oncoTreeVersion;
    return this;
  }

  /**
   * Get oncoTreeVersion
   * @return oncoTreeVersion
   */
  @javax.annotation.Nullable
  public String getOncoTreeVersion() {
    return oncoTreeVersion;
  }

  public void setOncoTreeVersion(@javax.annotation.Nullable String oncoTreeVersion) {
    this.oncoTreeVersion = oncoTreeVersion;
  }


  public OncoKBInfo publicInstance(@javax.annotation.Nullable Boolean publicInstance) {
    this.publicInstance = publicInstance;
    return this;
  }

  /**
   * Get publicInstance
   * @return publicInstance
   */
  @javax.annotation.Nullable
  public Boolean getPublicInstance() {
    return publicInstance;
  }

  public void setPublicInstance(@javax.annotation.Nullable Boolean publicInstance) {
    this.publicInstance = publicInstance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OncoKBInfo oncoKBInfo = (OncoKBInfo) o;
    return Objects.equals(this.apiVersion, oncoKBInfo.apiVersion) &&
        Objects.equals(this.appVersion, oncoKBInfo.appVersion) &&
        Objects.equals(this.dataVersion, oncoKBInfo.dataVersion) &&
        Objects.equals(this.levels, oncoKBInfo.levels) &&
        Objects.equals(this.ncitVersion, oncoKBInfo.ncitVersion) &&
        Objects.equals(this.oncoTreeVersion, oncoKBInfo.oncoTreeVersion) &&
        Objects.equals(this.publicInstance, oncoKBInfo.publicInstance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiVersion, appVersion, dataVersion, levels, ncitVersion, oncoTreeVersion, publicInstance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OncoKBInfo {\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    appVersion: ").append(toIndentedString(appVersion)).append("\n");
    sb.append("    dataVersion: ").append(toIndentedString(dataVersion)).append("\n");
    sb.append("    levels: ").append(toIndentedString(levels)).append("\n");
    sb.append("    ncitVersion: ").append(toIndentedString(ncitVersion)).append("\n");
    sb.append("    oncoTreeVersion: ").append(toIndentedString(oncoTreeVersion)).append("\n");
    sb.append("    publicInstance: ").append(toIndentedString(publicInstance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiVersion");
    openapiFields.add("appVersion");
    openapiFields.add("dataVersion");
    openapiFields.add("levels");
    openapiFields.add("ncitVersion");
    openapiFields.add("oncoTreeVersion");
    openapiFields.add("publicInstance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OncoKBInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OncoKBInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OncoKBInfo is not found in the empty JSON string", OncoKBInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OncoKBInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OncoKBInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `apiVersion`
      if (jsonObj.get("apiVersion") != null && !jsonObj.get("apiVersion").isJsonNull()) {
        SemVer.validateJsonElement(jsonObj.get("apiVersion"));
      }
      // validate the optional field `appVersion`
      if (jsonObj.get("appVersion") != null && !jsonObj.get("appVersion").isJsonNull()) {
        SemVer.validateJsonElement(jsonObj.get("appVersion"));
      }
      // validate the optional field `dataVersion`
      if (jsonObj.get("dataVersion") != null && !jsonObj.get("dataVersion").isJsonNull()) {
        Version.validateJsonElement(jsonObj.get("dataVersion"));
      }
      if (jsonObj.get("levels") != null && !jsonObj.get("levels").isJsonNull()) {
        JsonArray jsonArraylevels = jsonObj.getAsJsonArray("levels");
        if (jsonArraylevels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("levels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `levels` to be an array in the JSON string but got `%s`", jsonObj.get("levels").toString()));
          }

          // validate the optional field `levels` (array)
          for (int i = 0; i < jsonArraylevels.size(); i++) {
            InfoLevel.validateJsonElement(jsonArraylevels.get(i));
          };
        }
      }
      if ((jsonObj.get("ncitVersion") != null && !jsonObj.get("ncitVersion").isJsonNull()) && !jsonObj.get("ncitVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ncitVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ncitVersion").toString()));
      }
      if ((jsonObj.get("oncoTreeVersion") != null && !jsonObj.get("oncoTreeVersion").isJsonNull()) && !jsonObj.get("oncoTreeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oncoTreeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oncoTreeVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OncoKBInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OncoKBInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OncoKBInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OncoKBInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<OncoKBInfo>() {
           @Override
           public void write(JsonWriter out, OncoKBInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OncoKBInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OncoKBInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OncoKBInfo
   * @throws IOException if the JSON string is invalid with respect to OncoKBInfo
   */
  public static OncoKBInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OncoKBInfo.class);
  }

  /**
   * Convert an instance of OncoKBInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

