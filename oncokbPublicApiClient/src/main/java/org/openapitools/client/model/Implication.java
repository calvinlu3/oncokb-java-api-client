/*
 * OncoKB APIs
 * OncoKB, a comprehensive and curated precision oncology knowledge base, offers oncologists detailed, evidence-based information about individual somatic mutations and structural alterations present in patient tumors with the goal of supporting optimal treatment decisions.
 *
 * The version of the OpenAPI document: v1.5.0
 * Contact: contact@oncokb.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ArticleAbstract;
import org.openapitools.client.model.TumorType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Implication
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T16:13:52.565252-05:00[America/New_York]", comments = "Generator version: 7.11.0")
public class Implication {
  public static final String SERIALIZED_NAME_ABSTRACTS = "abstracts";
  @SerializedName(SERIALIZED_NAME_ABSTRACTS)
  @javax.annotation.Nullable
  private List<ArticleAbstract> abstracts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALTERATIONS = "alterations";
  @SerializedName(SERIALIZED_NAME_ALTERATIONS)
  @javax.annotation.Nullable
  private List<String> alterations = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  /**
   * Level associated with implication
   */
  @JsonAdapter(LevelOfEvidenceEnum.Adapter.class)
  public enum LevelOfEvidenceEnum {
    LEVEL_1("LEVEL_1"),
    
    LEVEL_2("LEVEL_2"),
    
    LEVEL_3_A("LEVEL_3A"),
    
    LEVEL_3_B("LEVEL_3B"),
    
    LEVEL_4("LEVEL_4"),
    
    LEVEL_R1("LEVEL_R1"),
    
    LEVEL_R2("LEVEL_R2"),
    
    LEVEL_PX1("LEVEL_Px1"),
    
    LEVEL_PX2("LEVEL_Px2"),
    
    LEVEL_PX3("LEVEL_Px3"),
    
    LEVEL_DX1("LEVEL_Dx1"),
    
    LEVEL_DX2("LEVEL_Dx2"),
    
    LEVEL_DX3("LEVEL_Dx3"),
    
    LEVEL_FDA1("LEVEL_Fda1"),
    
    LEVEL_FDA2("LEVEL_Fda2"),
    
    LEVEL_FDA3("LEVEL_Fda3"),
    
    NO("NO");

    private String value;

    LevelOfEvidenceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LevelOfEvidenceEnum fromValue(String value) {
      for (LevelOfEvidenceEnum b : LevelOfEvidenceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LevelOfEvidenceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LevelOfEvidenceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LevelOfEvidenceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LevelOfEvidenceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LevelOfEvidenceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEVEL_OF_EVIDENCE = "levelOfEvidence";
  @SerializedName(SERIALIZED_NAME_LEVEL_OF_EVIDENCE)
  @javax.annotation.Nullable
  private LevelOfEvidenceEnum levelOfEvidence;

  public static final String SERIALIZED_NAME_PMIDS = "pmids";
  @SerializedName(SERIALIZED_NAME_PMIDS)
  @javax.annotation.Nullable
  private List<String> pmids = new ArrayList<>();

  public static final String SERIALIZED_NAME_TUMOR_TYPE = "tumorType";
  @SerializedName(SERIALIZED_NAME_TUMOR_TYPE)
  @javax.annotation.Nullable
  private TumorType tumorType;

  public Implication() {
  }

  public Implication abstracts(@javax.annotation.Nullable List<ArticleAbstract> abstracts) {
    this.abstracts = abstracts;
    return this;
  }

  public Implication addAbstractsItem(ArticleAbstract abstractsItem) {
    if (this.abstracts == null) {
      this.abstracts = new ArrayList<>();
    }
    this.abstracts.add(abstractsItem);
    return this;
  }

  /**
   * List of abstracts cited to support the level of evidence. Defaulted to empty list
   * @return abstracts
   */
  @javax.annotation.Nullable
  public List<ArticleAbstract> getAbstracts() {
    return abstracts;
  }

  public void setAbstracts(@javax.annotation.Nullable List<ArticleAbstract> abstracts) {
    this.abstracts = abstracts;
  }


  public Implication alterations(@javax.annotation.Nullable List<String> alterations) {
    this.alterations = alterations;
    return this;
  }

  public Implication addAlterationsItem(String alterationsItem) {
    if (this.alterations == null) {
      this.alterations = new ArrayList<>();
    }
    this.alterations.add(alterationsItem);
    return this;
  }

  /**
   * List of alterations associated with implication
   * @return alterations
   */
  @javax.annotation.Nullable
  public List<String> getAlterations() {
    return alterations;
  }

  public void setAlterations(@javax.annotation.Nullable List<String> alterations) {
    this.alterations = alterations;
  }


  public Implication description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * DEPRECATED
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public Implication levelOfEvidence(@javax.annotation.Nullable LevelOfEvidenceEnum levelOfEvidence) {
    this.levelOfEvidence = levelOfEvidence;
    return this;
  }

  /**
   * Level associated with implication
   * @return levelOfEvidence
   */
  @javax.annotation.Nullable
  public LevelOfEvidenceEnum getLevelOfEvidence() {
    return levelOfEvidence;
  }

  public void setLevelOfEvidence(@javax.annotation.Nullable LevelOfEvidenceEnum levelOfEvidence) {
    this.levelOfEvidence = levelOfEvidence;
  }


  public Implication pmids(@javax.annotation.Nullable List<String> pmids) {
    this.pmids = pmids;
    return this;
  }

  public Implication addPmidsItem(String pmidsItem) {
    if (this.pmids == null) {
      this.pmids = new ArrayList<>();
    }
    this.pmids.add(pmidsItem);
    return this;
  }

  /**
   * List of PubMed IDs cited to support the level of evidence. Defaulted to empty list
   * @return pmids
   */
  @javax.annotation.Nullable
  public List<String> getPmids() {
    return pmids;
  }

  public void setPmids(@javax.annotation.Nullable List<String> pmids) {
    this.pmids = pmids;
  }


  public Implication tumorType(@javax.annotation.Nullable TumorType tumorType) {
    this.tumorType = tumorType;
    return this;
  }

  /**
   * Get tumorType
   * @return tumorType
   */
  @javax.annotation.Nullable
  public TumorType getTumorType() {
    return tumorType;
  }

  public void setTumorType(@javax.annotation.Nullable TumorType tumorType) {
    this.tumorType = tumorType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Implication implication = (Implication) o;
    return Objects.equals(this.abstracts, implication.abstracts) &&
        Objects.equals(this.alterations, implication.alterations) &&
        Objects.equals(this.description, implication.description) &&
        Objects.equals(this.levelOfEvidence, implication.levelOfEvidence) &&
        Objects.equals(this.pmids, implication.pmids) &&
        Objects.equals(this.tumorType, implication.tumorType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abstracts, alterations, description, levelOfEvidence, pmids, tumorType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Implication {\n");
    sb.append("    abstracts: ").append(toIndentedString(abstracts)).append("\n");
    sb.append("    alterations: ").append(toIndentedString(alterations)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    levelOfEvidence: ").append(toIndentedString(levelOfEvidence)).append("\n");
    sb.append("    pmids: ").append(toIndentedString(pmids)).append("\n");
    sb.append("    tumorType: ").append(toIndentedString(tumorType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abstracts");
    openapiFields.add("alterations");
    openapiFields.add("description");
    openapiFields.add("levelOfEvidence");
    openapiFields.add("pmids");
    openapiFields.add("tumorType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Implication
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Implication.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Implication is not found in the empty JSON string", Implication.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Implication.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Implication` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("abstracts") != null && !jsonObj.get("abstracts").isJsonNull()) {
        JsonArray jsonArrayabstracts = jsonObj.getAsJsonArray("abstracts");
        if (jsonArrayabstracts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("abstracts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `abstracts` to be an array in the JSON string but got `%s`", jsonObj.get("abstracts").toString()));
          }

          // validate the optional field `abstracts` (array)
          for (int i = 0; i < jsonArrayabstracts.size(); i++) {
            ArticleAbstract.validateJsonElement(jsonArrayabstracts.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("alterations") != null && !jsonObj.get("alterations").isJsonNull() && !jsonObj.get("alterations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alterations` to be an array in the JSON string but got `%s`", jsonObj.get("alterations").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("levelOfEvidence") != null && !jsonObj.get("levelOfEvidence").isJsonNull()) && !jsonObj.get("levelOfEvidence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `levelOfEvidence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("levelOfEvidence").toString()));
      }
      // validate the optional field `levelOfEvidence`
      if (jsonObj.get("levelOfEvidence") != null && !jsonObj.get("levelOfEvidence").isJsonNull()) {
        LevelOfEvidenceEnum.validateJsonElement(jsonObj.get("levelOfEvidence"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pmids") != null && !jsonObj.get("pmids").isJsonNull() && !jsonObj.get("pmids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pmids` to be an array in the JSON string but got `%s`", jsonObj.get("pmids").toString()));
      }
      // validate the optional field `tumorType`
      if (jsonObj.get("tumorType") != null && !jsonObj.get("tumorType").isJsonNull()) {
        TumorType.validateJsonElement(jsonObj.get("tumorType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Implication.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Implication' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Implication> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Implication.class));

       return (TypeAdapter<T>) new TypeAdapter<Implication>() {
           @Override
           public void write(JsonWriter out, Implication value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Implication read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Implication given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Implication
   * @throws IOException if the JSON string is invalid with respect to Implication
   */
  public static Implication fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Implication.class);
  }

  /**
   * Convert an instance of Implication to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

