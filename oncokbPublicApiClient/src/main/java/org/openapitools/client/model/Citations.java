/*
 * OncoKB APIs
 * OncoKB, a comprehensive and curated precision oncology knowledge base, offers oncologists detailed, evidence-based information about individual somatic mutations and structural alterations present in patient tumors with the goal of supporting optimal treatment decisions.
 *
 * The version of the OpenAPI document: v1.5.0
 * Contact: contact@oncokb.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ArticleAbstract;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Citations
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T16:00:42.192711-05:00[America/New_York]", comments = "Generator version: 7.11.0")
public class Citations {
  public static final String SERIALIZED_NAME_ABSTRACTS = "abstracts";
  @SerializedName(SERIALIZED_NAME_ABSTRACTS)
  @javax.annotation.Nullable
  private List<ArticleAbstract> abstracts = new ArrayList<>();

  public static final String SERIALIZED_NAME_PMIDS = "pmids";
  @SerializedName(SERIALIZED_NAME_PMIDS)
  @javax.annotation.Nullable
  private List<String> pmids = new ArrayList<>();

  public Citations() {
  }

  public Citations abstracts(@javax.annotation.Nullable List<ArticleAbstract> abstracts) {
    this.abstracts = abstracts;
    return this;
  }

  public Citations addAbstractsItem(ArticleAbstract abstractsItem) {
    if (this.abstracts == null) {
      this.abstracts = new ArrayList<>();
    }
    this.abstracts.add(abstractsItem);
    return this;
  }

  /**
   * Set of Abstract sources
   * @return abstracts
   */
  @javax.annotation.Nullable
  public List<ArticleAbstract> getAbstracts() {
    return abstracts;
  }

  public void setAbstracts(@javax.annotation.Nullable List<ArticleAbstract> abstracts) {
    this.abstracts = abstracts;
  }


  public Citations pmids(@javax.annotation.Nullable List<String> pmids) {
    this.pmids = pmids;
    return this;
  }

  public Citations addPmidsItem(String pmidsItem) {
    if (this.pmids == null) {
      this.pmids = new ArrayList<>();
    }
    this.pmids.add(pmidsItem);
    return this;
  }

  /**
   * Set of PubMed article ids
   * @return pmids
   */
  @javax.annotation.Nullable
  public List<String> getPmids() {
    return pmids;
  }

  public void setPmids(@javax.annotation.Nullable List<String> pmids) {
    this.pmids = pmids;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Citations citations = (Citations) o;
    return Objects.equals(this.abstracts, citations.abstracts) &&
        Objects.equals(this.pmids, citations.pmids);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abstracts, pmids);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Citations {\n");
    sb.append("    abstracts: ").append(toIndentedString(abstracts)).append("\n");
    sb.append("    pmids: ").append(toIndentedString(pmids)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abstracts");
    openapiFields.add("pmids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Citations
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Citations.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Citations is not found in the empty JSON string", Citations.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Citations.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Citations` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("abstracts") != null && !jsonObj.get("abstracts").isJsonNull()) {
        JsonArray jsonArrayabstracts = jsonObj.getAsJsonArray("abstracts");
        if (jsonArrayabstracts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("abstracts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `abstracts` to be an array in the JSON string but got `%s`", jsonObj.get("abstracts").toString()));
          }

          // validate the optional field `abstracts` (array)
          for (int i = 0; i < jsonArrayabstracts.size(); i++) {
            ArticleAbstract.validateJsonElement(jsonArrayabstracts.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pmids") != null && !jsonObj.get("pmids").isJsonNull() && !jsonObj.get("pmids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pmids` to be an array in the JSON string but got `%s`", jsonObj.get("pmids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Citations.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Citations' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Citations> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Citations.class));

       return (TypeAdapter<T>) new TypeAdapter<Citations>() {
           @Override
           public void write(JsonWriter out, Citations value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Citations read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Citations given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Citations
   * @throws IOException if the JSON string is invalid with respect to Citations
   */
  public static Citations fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Citations.class);
  }

  /**
   * Convert an instance of Citations to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

