/*
 * OncoKB APIs
 * OncoKB, a comprehensive and curated precision oncology knowledge base, offers oncologists detailed, evidence-based information about individual somatic mutations and structural alterations present in patient tumors with the goal of supporting optimal treatment decisions.
 *
 * The version of the OpenAPI document: v1.5.0
 * Contact: contact@oncokb.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Citations;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MutationEffectResp
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T16:00:42.192711-05:00[America/New_York]", comments = "Generator version: 7.11.0")
public class MutationEffectResp {
  public static final String SERIALIZED_NAME_CITATIONS = "citations";
  @SerializedName(SERIALIZED_NAME_CITATIONS)
  @javax.annotation.Nullable
  private Citations citations;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  /**
   * Indicates the effect of the mutation on the gene. Defaulted to \&quot;\&quot;
   */
  @JsonAdapter(KnownEffectEnum.Adapter.class)
  public enum KnownEffectEnum {
    GAIN_OF_FUNCTION("Gain-of-function"),
    
    INCONCLUSIVE("Inconclusive"),
    
    LOSS_OF_FUNCTION("Loss-of-function"),
    
    LIKELY_LOSS_OF_FUNCTION("Likely Loss-of-function"),
    
    LIKELY_GAIN_OF_FUNCTION("Likely Gain-of-function"),
    
    NEUTRAL("Neutral"),
    
    UNKNOWN("Unknown"),
    
    LIKELY_SWITCH_OF_FUNCTION("Likely Switch-of-function"),
    
    SWITCH_OF_FUNCTION("Switch-of-function"),
    
    LIKELY_NEUTRAL("Likely Neutral");

    private String value;

    KnownEffectEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KnownEffectEnum fromValue(String value) {
      for (KnownEffectEnum b : KnownEffectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KnownEffectEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KnownEffectEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KnownEffectEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KnownEffectEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KnownEffectEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KNOWN_EFFECT = "knownEffect";
  @SerializedName(SERIALIZED_NAME_KNOWN_EFFECT)
  @javax.annotation.Nullable
  private KnownEffectEnum knownEffect;

  public MutationEffectResp() {
  }

  public MutationEffectResp citations(@javax.annotation.Nullable Citations citations) {
    this.citations = citations;
    return this;
  }

  /**
   * Get citations
   * @return citations
   */
  @javax.annotation.Nullable
  public Citations getCitations() {
    return citations;
  }

  public void setCitations(@javax.annotation.Nullable Citations citations) {
    this.citations = citations;
  }


  public MutationEffectResp description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * A brief overview of the biological and oncogenic effect of the variant. Defaulted to \&quot;\&quot;
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public MutationEffectResp knownEffect(@javax.annotation.Nullable KnownEffectEnum knownEffect) {
    this.knownEffect = knownEffect;
    return this;
  }

  /**
   * Indicates the effect of the mutation on the gene. Defaulted to \&quot;\&quot;
   * @return knownEffect
   */
  @javax.annotation.Nullable
  public KnownEffectEnum getKnownEffect() {
    return knownEffect;
  }

  public void setKnownEffect(@javax.annotation.Nullable KnownEffectEnum knownEffect) {
    this.knownEffect = knownEffect;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MutationEffectResp mutationEffectResp = (MutationEffectResp) o;
    return Objects.equals(this.citations, mutationEffectResp.citations) &&
        Objects.equals(this.description, mutationEffectResp.description) &&
        Objects.equals(this.knownEffect, mutationEffectResp.knownEffect);
  }

  @Override
  public int hashCode() {
    return Objects.hash(citations, description, knownEffect);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MutationEffectResp {\n");
    sb.append("    citations: ").append(toIndentedString(citations)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    knownEffect: ").append(toIndentedString(knownEffect)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("citations");
    openapiFields.add("description");
    openapiFields.add("knownEffect");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MutationEffectResp
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MutationEffectResp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MutationEffectResp is not found in the empty JSON string", MutationEffectResp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MutationEffectResp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MutationEffectResp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `citations`
      if (jsonObj.get("citations") != null && !jsonObj.get("citations").isJsonNull()) {
        Citations.validateJsonElement(jsonObj.get("citations"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("knownEffect") != null && !jsonObj.get("knownEffect").isJsonNull()) && !jsonObj.get("knownEffect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `knownEffect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("knownEffect").toString()));
      }
      // validate the optional field `knownEffect`
      if (jsonObj.get("knownEffect") != null && !jsonObj.get("knownEffect").isJsonNull()) {
        KnownEffectEnum.validateJsonElement(jsonObj.get("knownEffect"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MutationEffectResp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MutationEffectResp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MutationEffectResp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MutationEffectResp.class));

       return (TypeAdapter<T>) new TypeAdapter<MutationEffectResp>() {
           @Override
           public void write(JsonWriter out, MutationEffectResp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MutationEffectResp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MutationEffectResp given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MutationEffectResp
   * @throws IOException if the JSON string is invalid with respect to MutationEffectResp
   */
  public static MutationEffectResp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MutationEffectResp.class);
  }

  /**
   * Convert an instance of MutationEffectResp to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

